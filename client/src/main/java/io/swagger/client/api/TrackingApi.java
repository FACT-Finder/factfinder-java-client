/*
 * FACT-Finder REST-API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.CartOrCheckoutEvent;
import io.swagger.client.model.ClickEvent;
import io.swagger.client.model.FeedbackEvent;
import io.swagger.client.model.LoginEvent;
import io.swagger.client.model.RecommendationClickEvent;
import io.swagger.client.model.SearchLogEvent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrackingApi {
    private ApiClient apiClient;

    public TrackingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for trackCartUsingPOST */
    private com.squareup.okhttp.Call trackCartUsingPOSTCall(String channel, List<CartOrCheckoutEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = events;
        
        // create path and map variables
        String localVarPath = "/v1/track/{channel}/cart".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackCartUsingPOSTValidateBeforeCall(String channel, List<CartOrCheckoutEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling trackCartUsingPOST(Async)");
        }
        
        // verify the required parameter 'events' is set
        if (events == null) {
            throw new ApiException("Missing the required parameter 'events' when calling trackCartUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = trackCartUsingPOSTCall(channel, events, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Track a cart event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackCartUsingPOST(String channel, List<CartOrCheckoutEvent> events) throws ApiException {
        trackCartUsingPOSTWithHttpInfo(channel, events);
    }

    /**
     * Track a cart event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackCartUsingPOSTWithHttpInfo(String channel, List<CartOrCheckoutEvent> events) throws ApiException {
        com.squareup.okhttp.Call call = trackCartUsingPOSTValidateBeforeCall(channel, events, null, null);
        return apiClient.execute(call);
    }

    /**
     * Track a cart event (asynchronously)
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackCartUsingPOSTAsync(String channel, List<CartOrCheckoutEvent> events, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackCartUsingPOSTValidateBeforeCall(channel, events, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for trackCheckoutUsingPOST */
    private com.squareup.okhttp.Call trackCheckoutUsingPOSTCall(String channel, List<CartOrCheckoutEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = events;
        
        // create path and map variables
        String localVarPath = "/v1/track/{channel}/checkout".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackCheckoutUsingPOSTValidateBeforeCall(String channel, List<CartOrCheckoutEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling trackCheckoutUsingPOST(Async)");
        }
        
        // verify the required parameter 'events' is set
        if (events == null) {
            throw new ApiException("Missing the required parameter 'events' when calling trackCheckoutUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = trackCheckoutUsingPOSTCall(channel, events, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Track a checkout event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackCheckoutUsingPOST(String channel, List<CartOrCheckoutEvent> events) throws ApiException {
        trackCheckoutUsingPOSTWithHttpInfo(channel, events);
    }

    /**
     * Track a checkout event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackCheckoutUsingPOSTWithHttpInfo(String channel, List<CartOrCheckoutEvent> events) throws ApiException {
        com.squareup.okhttp.Call call = trackCheckoutUsingPOSTValidateBeforeCall(channel, events, null, null);
        return apiClient.execute(call);
    }

    /**
     * Track a checkout event (asynchronously)
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackCheckoutUsingPOSTAsync(String channel, List<CartOrCheckoutEvent> events, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackCheckoutUsingPOSTValidateBeforeCall(channel, events, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for trackClickUsingPOST */
    private com.squareup.okhttp.Call trackClickUsingPOSTCall(String channel, List<ClickEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = events;
        
        // create path and map variables
        String localVarPath = "/v1/track/{channel}/click".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackClickUsingPOSTValidateBeforeCall(String channel, List<ClickEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling trackClickUsingPOST(Async)");
        }
        
        // verify the required parameter 'events' is set
        if (events == null) {
            throw new ApiException("Missing the required parameter 'events' when calling trackClickUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = trackClickUsingPOSTCall(channel, events, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Track a click event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackClickUsingPOST(String channel, List<ClickEvent> events) throws ApiException {
        trackClickUsingPOSTWithHttpInfo(channel, events);
    }

    /**
     * Track a click event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackClickUsingPOSTWithHttpInfo(String channel, List<ClickEvent> events) throws ApiException {
        com.squareup.okhttp.Call call = trackClickUsingPOSTValidateBeforeCall(channel, events, null, null);
        return apiClient.execute(call);
    }

    /**
     * Track a click event (asynchronously)
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackClickUsingPOSTAsync(String channel, List<ClickEvent> events, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackClickUsingPOSTValidateBeforeCall(channel, events, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for trackFeedbackUsingPOST */
    private com.squareup.okhttp.Call trackFeedbackUsingPOSTCall(String channel, List<FeedbackEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = events;
        
        // create path and map variables
        String localVarPath = "/v1/track/{channel}/feedback".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackFeedbackUsingPOSTValidateBeforeCall(String channel, List<FeedbackEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling trackFeedbackUsingPOST(Async)");
        }
        
        // verify the required parameter 'events' is set
        if (events == null) {
            throw new ApiException("Missing the required parameter 'events' when calling trackFeedbackUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = trackFeedbackUsingPOSTCall(channel, events, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Track a feedback event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackFeedbackUsingPOST(String channel, List<FeedbackEvent> events) throws ApiException {
        trackFeedbackUsingPOSTWithHttpInfo(channel, events);
    }

    /**
     * Track a feedback event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackFeedbackUsingPOSTWithHttpInfo(String channel, List<FeedbackEvent> events) throws ApiException {
        com.squareup.okhttp.Call call = trackFeedbackUsingPOSTValidateBeforeCall(channel, events, null, null);
        return apiClient.execute(call);
    }

    /**
     * Track a feedback event (asynchronously)
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackFeedbackUsingPOSTAsync(String channel, List<FeedbackEvent> events, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackFeedbackUsingPOSTValidateBeforeCall(channel, events, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for trackLogUsingPOST */
    private com.squareup.okhttp.Call trackLogUsingPOSTCall(String channel, List<SearchLogEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = events;
        
        // create path and map variables
        String localVarPath = "/v1/track/{channel}/log".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackLogUsingPOSTValidateBeforeCall(String channel, List<SearchLogEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling trackLogUsingPOST(Async)");
        }
        
        // verify the required parameter 'events' is set
        if (events == null) {
            throw new ApiException("Missing the required parameter 'events' when calling trackLogUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = trackLogUsingPOSTCall(channel, events, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Track a log event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackLogUsingPOST(String channel, List<SearchLogEvent> events) throws ApiException {
        trackLogUsingPOSTWithHttpInfo(channel, events);
    }

    /**
     * Track a log event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackLogUsingPOSTWithHttpInfo(String channel, List<SearchLogEvent> events) throws ApiException {
        com.squareup.okhttp.Call call = trackLogUsingPOSTValidateBeforeCall(channel, events, null, null);
        return apiClient.execute(call);
    }

    /**
     * Track a log event (asynchronously)
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackLogUsingPOSTAsync(String channel, List<SearchLogEvent> events, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackLogUsingPOSTValidateBeforeCall(channel, events, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for trackLoginUsingPOST */
    private com.squareup.okhttp.Call trackLoginUsingPOSTCall(String channel, List<LoginEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = events;
        
        // create path and map variables
        String localVarPath = "/v1/track/{channel}/login".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackLoginUsingPOSTValidateBeforeCall(String channel, List<LoginEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling trackLoginUsingPOST(Async)");
        }
        
        // verify the required parameter 'events' is set
        if (events == null) {
            throw new ApiException("Missing the required parameter 'events' when calling trackLoginUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = trackLoginUsingPOSTCall(channel, events, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Track a login event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackLoginUsingPOST(String channel, List<LoginEvent> events) throws ApiException {
        trackLoginUsingPOSTWithHttpInfo(channel, events);
    }

    /**
     * Track a login event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackLoginUsingPOSTWithHttpInfo(String channel, List<LoginEvent> events) throws ApiException {
        com.squareup.okhttp.Call call = trackLoginUsingPOSTValidateBeforeCall(channel, events, null, null);
        return apiClient.execute(call);
    }

    /**
     * Track a login event (asynchronously)
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackLoginUsingPOSTAsync(String channel, List<LoginEvent> events, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackLoginUsingPOSTValidateBeforeCall(channel, events, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for trackRecommendationClickUsingPOST */
    private com.squareup.okhttp.Call trackRecommendationClickUsingPOSTCall(String channel, List<RecommendationClickEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = events;
        
        // create path and map variables
        String localVarPath = "/v1/track/{channel}/recommendationClick".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackRecommendationClickUsingPOSTValidateBeforeCall(String channel, List<RecommendationClickEvent> events, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling trackRecommendationClickUsingPOST(Async)");
        }
        
        // verify the required parameter 'events' is set
        if (events == null) {
            throw new ApiException("Missing the required parameter 'events' when calling trackRecommendationClickUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = trackRecommendationClickUsingPOSTCall(channel, events, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Track a recommendation click event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void trackRecommendationClickUsingPOST(String channel, List<RecommendationClickEvent> events) throws ApiException {
        trackRecommendationClickUsingPOSTWithHttpInfo(channel, events);
    }

    /**
     * Track a recommendation click event
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> trackRecommendationClickUsingPOSTWithHttpInfo(String channel, List<RecommendationClickEvent> events) throws ApiException {
        com.squareup.okhttp.Call call = trackRecommendationClickUsingPOSTValidateBeforeCall(channel, events, null, null);
        return apiClient.execute(call);
    }

    /**
     * Track a recommendation click event (asynchronously)
     * 
     * @param channel channel (required)
     * @param events events (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackRecommendationClickUsingPOSTAsync(String channel, List<RecommendationClickEvent> events, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackRecommendationClickUsingPOSTValidateBeforeCall(channel, events, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
