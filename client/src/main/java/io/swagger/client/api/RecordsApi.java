/*
 * FACT-Finder REST-API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.RecordWithId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecordsApi {
    private ApiClient apiClient;

    public RecordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecordsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteUsingDELETE */
    private com.squareup.okhttp.Call deleteUsingDELETECall(String channel, List<String> recordId, Boolean save, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/records/{channel}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (recordId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "recordId", recordId));
        if (save != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "save", save));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUsingDELETEValidateBeforeCall(String channel, List<String> recordId, Boolean save, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling deleteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling deleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteUsingDELETECall(channel, recordId, save, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete records
     * 
     * @param channel channel (required)
     * @param recordId The ids from the records which should be deleted. (required)
     * @param save When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUsingDELETE(String channel, List<String> recordId, Boolean save) throws ApiException {
        deleteUsingDELETEWithHttpInfo(channel, recordId, save);
    }

    /**
     * Delete records
     * 
     * @param channel channel (required)
     * @param recordId The ids from the records which should be deleted. (required)
     * @param save When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUsingDELETEWithHttpInfo(String channel, List<String> recordId, Boolean save) throws ApiException {
        com.squareup.okhttp.Call call = deleteUsingDELETEValidateBeforeCall(channel, recordId, save, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete records (asynchronously)
     * 
     * @param channel channel (required)
     * @param recordId The ids from the records which should be deleted. (required)
     * @param save When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUsingDELETEAsync(String channel, List<String> recordId, Boolean save, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUsingDELETEValidateBeforeCall(channel, recordId, save, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getRecordsUsingGET */
    private com.squareup.okhttp.Call getRecordsUsingGETCall(String channel, List<String> recordId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/records/{channel}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (recordId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "recordId", recordId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecordsUsingGETValidateBeforeCall(String channel, List<String> recordId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getRecordsUsingGET(Async)");
        }
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling getRecordsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRecordsUsingGETCall(channel, recordId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get records
     * 
     * @param channel channel (required)
     * @param recordId The record ids of the records which should be returned (required)
     * @return List&lt;RecordWithId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RecordWithId> getRecordsUsingGET(String channel, List<String> recordId) throws ApiException {
        ApiResponse<List<RecordWithId>> resp = getRecordsUsingGETWithHttpInfo(channel, recordId);
        return resp.getData();
    }

    /**
     * Get records
     * 
     * @param channel channel (required)
     * @param recordId The record ids of the records which should be returned (required)
     * @return ApiResponse&lt;List&lt;RecordWithId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RecordWithId>> getRecordsUsingGETWithHttpInfo(String channel, List<String> recordId) throws ApiException {
        com.squareup.okhttp.Call call = getRecordsUsingGETValidateBeforeCall(channel, recordId, null, null);
        Type localVarReturnType = new TypeToken<List<RecordWithId>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get records (asynchronously)
     * 
     * @param channel channel (required)
     * @param recordId The record ids of the records which should be returned (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecordsUsingGETAsync(String channel, List<String> recordId, final ApiCallback<List<RecordWithId>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecordsUsingGETValidateBeforeCall(channel, recordId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RecordWithId>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for insertRecordsUsingPOST */
    private com.squareup.okhttp.Call insertRecordsUsingPOSTCall(String channel, List<RecordWithId> records, Boolean save, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = records;
        
        // create path and map variables
        String localVarPath = "/v1/records/{channel}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (save != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "save", save));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertRecordsUsingPOSTValidateBeforeCall(String channel, List<RecordWithId> records, Boolean save, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling insertRecordsUsingPOST(Async)");
        }
        
        // verify the required parameter 'records' is set
        if (records == null) {
            throw new ApiException("Missing the required parameter 'records' when calling insertRecordsUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertRecordsUsingPOSTCall(channel, records, save, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert records
     * 
     * @param channel channel (required)
     * @param records The records which should be inserted (required)
     * @param save When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void insertRecordsUsingPOST(String channel, List<RecordWithId> records, Boolean save) throws ApiException {
        insertRecordsUsingPOSTWithHttpInfo(channel, records, save);
    }

    /**
     * Insert records
     * 
     * @param channel channel (required)
     * @param records The records which should be inserted (required)
     * @param save When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> insertRecordsUsingPOSTWithHttpInfo(String channel, List<RecordWithId> records, Boolean save) throws ApiException {
        com.squareup.okhttp.Call call = insertRecordsUsingPOSTValidateBeforeCall(channel, records, save, null, null);
        return apiClient.execute(call);
    }

    /**
     * Insert records (asynchronously)
     * 
     * @param channel channel (required)
     * @param records The records which should be inserted (required)
     * @param save When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertRecordsUsingPOSTAsync(String channel, List<RecordWithId> records, Boolean save, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertRecordsUsingPOSTValidateBeforeCall(channel, records, save, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateUsingPUT */
    private com.squareup.okhttp.Call updateUsingPUTCall(String channel, List<RecordWithId> records, Boolean save, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = records;
        
        // create path and map variables
        String localVarPath = "/v1/records/{channel}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (save != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "save", save));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUsingPUTValidateBeforeCall(String channel, List<RecordWithId> records, Boolean save, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling updateUsingPUT(Async)");
        }
        
        // verify the required parameter 'records' is set
        if (records == null) {
            throw new ApiException("Missing the required parameter 'records' when calling updateUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUsingPUTCall(channel, records, save, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update records
     * 
     * @param channel channel (required)
     * @param records The records which should be updated (required)
     * @param save When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUsingPUT(String channel, List<RecordWithId> records, Boolean save) throws ApiException {
        updateUsingPUTWithHttpInfo(channel, records, save);
    }

    /**
     * Update records
     * 
     * @param channel channel (required)
     * @param records The records which should be updated (required)
     * @param save When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUsingPUTWithHttpInfo(String channel, List<RecordWithId> records, Boolean save) throws ApiException {
        com.squareup.okhttp.Call call = updateUsingPUTValidateBeforeCall(channel, records, save, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update records (asynchronously)
     * 
     * @param channel channel (required)
     * @param records The records which should be updated (required)
     * @param save When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUsingPUTAsync(String channel, List<RecordWithId> records, Boolean save, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUsingPUTValidateBeforeCall(channel, records, save, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
