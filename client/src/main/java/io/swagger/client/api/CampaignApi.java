/*
 * FACT-Finder REST-API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiError;
import io.swagger.client.model.Campaign;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignApi {
    private ApiClient apiClient;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getPageCampaignsUsingGET */
    private com.squareup.okhttp.Call getPageCampaignsUsingGETCall(String channel, String pageId, Boolean idsOnly, String sid, String advisorStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/campaign/{channel}/page".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (idsOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "idsOnly", idsOnly));
        if (pageId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageId", pageId));
        if (sid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sid", sid));
        if (advisorStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "advisorStatus", advisorStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageCampaignsUsingGETValidateBeforeCall(String channel, String pageId, Boolean idsOnly, String sid, String advisorStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getPageCampaignsUsingGET(Async)");
        }
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPageCampaignsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPageCampaignsUsingGETCall(channel, pageId, idsOnly, sid, advisorStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get page campaigns
     * 
     * @param channel channel (required)
     * @param pageId Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @return List&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Campaign> getPageCampaignsUsingGET(String channel, String pageId, Boolean idsOnly, String sid, String advisorStatus) throws ApiException {
        ApiResponse<List<Campaign>> resp = getPageCampaignsUsingGETWithHttpInfo(channel, pageId, idsOnly, sid, advisorStatus);
        return resp.getData();
    }

    /**
     * Get page campaigns
     * 
     * @param channel channel (required)
     * @param pageId Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @return ApiResponse&lt;List&lt;Campaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Campaign>> getPageCampaignsUsingGETWithHttpInfo(String channel, String pageId, Boolean idsOnly, String sid, String advisorStatus) throws ApiException {
        com.squareup.okhttp.Call call = getPageCampaignsUsingGETValidateBeforeCall(channel, pageId, idsOnly, sid, advisorStatus, null, null);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get page campaigns (asynchronously)
     * 
     * @param channel channel (required)
     * @param pageId Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageCampaignsUsingGETAsync(String channel, String pageId, Boolean idsOnly, String sid, String advisorStatus, final ApiCallback<List<Campaign>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageCampaignsUsingGETValidateBeforeCall(channel, pageId, idsOnly, sid, advisorStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProductCampaignsUsingGET */
    private com.squareup.okhttp.Call getProductCampaignsUsingGETCall(String channel, String productNumber, Boolean idsOnly, String sid, String advisorStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/campaign/{channel}/product".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (idsOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "idsOnly", idsOnly));
        if (productNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "productNumber", productNumber));
        if (sid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sid", sid));
        if (advisorStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "advisorStatus", advisorStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProductCampaignsUsingGETValidateBeforeCall(String channel, String productNumber, Boolean idsOnly, String sid, String advisorStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getProductCampaignsUsingGET(Async)");
        }
        
        // verify the required parameter 'productNumber' is set
        if (productNumber == null) {
            throw new ApiException("Missing the required parameter 'productNumber' when calling getProductCampaignsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getProductCampaignsUsingGETCall(channel, productNumber, idsOnly, sid, advisorStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get product campaigns
     * 
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass a product ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @return List&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Campaign> getProductCampaignsUsingGET(String channel, String productNumber, Boolean idsOnly, String sid, String advisorStatus) throws ApiException {
        ApiResponse<List<Campaign>> resp = getProductCampaignsUsingGETWithHttpInfo(channel, productNumber, idsOnly, sid, advisorStatus);
        return resp.getData();
    }

    /**
     * Get product campaigns
     * 
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass a product ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @return ApiResponse&lt;List&lt;Campaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Campaign>> getProductCampaignsUsingGETWithHttpInfo(String channel, String productNumber, Boolean idsOnly, String sid, String advisorStatus) throws ApiException {
        com.squareup.okhttp.Call call = getProductCampaignsUsingGETValidateBeforeCall(channel, productNumber, idsOnly, sid, advisorStatus, null, null);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get product campaigns (asynchronously)
     * 
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass a product ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProductCampaignsUsingGETAsync(String channel, String productNumber, Boolean idsOnly, String sid, String advisorStatus, final ApiCallback<List<Campaign>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProductCampaignsUsingGETValidateBeforeCall(channel, productNumber, idsOnly, sid, advisorStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getShoppingCartCampaignsUsingGET */
    private com.squareup.okhttp.Call getShoppingCartCampaignsUsingGETCall(String channel, List<String> productNumber, Boolean idsOnly, String sid, String advisorStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/campaign/{channel}/shoppingcart".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channel" + "\\}", apiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (idsOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "idsOnly", idsOnly));
        if (productNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "productNumber", productNumber));
        if (sid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sid", sid));
        if (advisorStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "advisorStatus", advisorStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getShoppingCartCampaignsUsingGETValidateBeforeCall(String channel, List<String> productNumber, Boolean idsOnly, String sid, String advisorStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getShoppingCartCampaignsUsingGET(Async)");
        }
        
        // verify the required parameter 'productNumber' is set
        if (productNumber == null) {
            throw new ApiException("Missing the required parameter 'productNumber' when calling getShoppingCartCampaignsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getShoppingCartCampaignsUsingGETCall(channel, productNumber, idsOnly, sid, advisorStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get shopping cart campaigns
     * 
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @return List&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Campaign> getShoppingCartCampaignsUsingGET(String channel, List<String> productNumber, Boolean idsOnly, String sid, String advisorStatus) throws ApiException {
        ApiResponse<List<Campaign>> resp = getShoppingCartCampaignsUsingGETWithHttpInfo(channel, productNumber, idsOnly, sid, advisorStatus);
        return resp.getData();
    }

    /**
     * Get shopping cart campaigns
     * 
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @return ApiResponse&lt;List&lt;Campaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Campaign>> getShoppingCartCampaignsUsingGETWithHttpInfo(String channel, List<String> productNumber, Boolean idsOnly, String sid, String advisorStatus) throws ApiException {
        com.squareup.okhttp.Call call = getShoppingCartCampaignsUsingGETValidateBeforeCall(channel, productNumber, idsOnly, sid, advisorStatus, null, null);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get shopping cart campaigns (asynchronously)
     * 
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShoppingCartCampaignsUsingGETAsync(String channel, List<String> productNumber, Boolean idsOnly, String sid, String advisorStatus, final ApiCallback<List<Campaign>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShoppingCartCampaignsUsingGETValidateBeforeCall(channel, productNumber, idsOnly, sid, advisorStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
