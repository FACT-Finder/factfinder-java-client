/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Contains information which will be returned when an error occurs.
 */
@ApiModel(description = "Contains information which will be returned when an error occurs.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApiError {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "errorDescription";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  private String errorDescription;

  public static final String SERIALIZED_NAME_STACKTRACE = "stacktrace";
  @SerializedName(SERIALIZED_NAME_STACKTRACE)
  private List<String> stacktrace = null;


  public ApiError error(String error) {
    
    this.error = error;
    return this;
  }

   /**
   * A short error description
   * @return error
  **/
  @ApiModelProperty(example = "Bad Request", required = true, value = "A short error description")

  public String getError() {
    return error;
  }


  public void setError(String error) {
    this.error = error;
  }


  public ApiError errorDescription(String errorDescription) {
    
    this.errorDescription = errorDescription;
    return this;
  }

   /**
   * A description of the error cause
   * @return errorDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Parameter 'channel' must be present", value = "A description of the error cause")

  public String getErrorDescription() {
    return errorDescription;
  }


  public void setErrorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
  }


  public ApiError stacktrace(List<String> stacktrace) {
    
    this.stacktrace = stacktrace;
    return this;
  }

  public ApiError addStacktraceItem(String stacktraceItem) {
    if (this.stacktrace == null) {
      this.stacktrace = new ArrayList<String>();
    }
    this.stacktrace.add(stacktraceItem);
    return this;
  }

   /**
   * The stacktrace from the error (will only be transmitted when the query parameter verbose&#x3D;true was added to the request)
   * @return stacktrace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "de.factfinder.validation.ValidationException,  at de.factfinder.validation.Validator.validate(Validator.java:24)", value = "The stacktrace from the error (will only be transmitted when the query parameter verbose=true was added to the request)")

  public List<String> getStacktrace() {
    return stacktrace;
  }


  public void setStacktrace(List<String> stacktrace) {
    this.stacktrace = stacktrace;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiError apiError = (ApiError) o;
    return Objects.equals(this.error, apiError.error) &&
        Objects.equals(this.errorDescription, apiError.errorDescription) &&
        Objects.equals(this.stacktrace, apiError.stacktrace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, errorDescription, stacktrace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiError {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("    stacktrace: ").append(toIndentedString(stacktrace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

