/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * SearchRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SearchRecord {
  public static final String SERIALIZED_NAME_FOUND_WORDS = "foundWords";
  @SerializedName(SERIALIZED_NAME_FOUND_WORDS)
  private List<String> foundWords = new ArrayList<String>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MASTER_VALUES = "masterValues";
  @SerializedName(SERIALIZED_NAME_MASTER_VALUES)
  private Map<String, Object> masterValues = new HashMap<String, Object>();

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_VARIANT_VALUES = "variantValues";
  @SerializedName(SERIALIZED_NAME_VARIANT_VALUES)
  private List<Map<String, Object>> variantValues = new ArrayList<Map<String, Object>>();


  public SearchRecord foundWords(List<String> foundWords) {
    
    this.foundWords = foundWords;
    return this;
  }

  public SearchRecord addFoundWordsItem(String foundWordsItem) {
    this.foundWords.add(foundWordsItem);
    return this;
  }

   /**
   * The words that caused this record to be part of the result.
   * @return foundWords
  **/
  @ApiModelProperty(required = true, value = "The words that caused this record to be part of the result.")

  public List<String> getFoundWords() {
    return foundWords;
  }


  public void setFoundWords(List<String> foundWords) {
    this.foundWords = foundWords;
  }


  public SearchRecord id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the record.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The ID of the record.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public SearchRecord masterValues(Map<String, Object> masterValues) {
    
    this.masterValues = masterValues;
    return this;
  }

  public SearchRecord putMasterValuesItem(String key, Object masterValuesItem) {
    this.masterValues.put(key, masterValuesItem);
    return this;
  }

   /**
   * Contains all fields in the record, with a string representation of the respective values.
   * @return masterValues
  **/
  @ApiModelProperty(required = true, value = "Contains all fields in the record, with a string representation of the respective values.")

  public Map<String, Object> getMasterValues() {
    return masterValues;
  }


  public void setMasterValues(Map<String, Object> masterValues) {
    this.masterValues = masterValues;
  }


  public SearchRecord position(Integer position) {
    
    this.position = position;
    return this;
  }

   /**
   * The position of the record in the search results (starting with 0).
   * @return position
  **/
  @ApiModelProperty(required = true, value = "The position of the record in the search results (starting with 0).")

  public Integer getPosition() {
    return position;
  }


  public void setPosition(Integer position) {
    this.position = position;
  }


  public SearchRecord score(Float score) {
    
    this.score = score;
    return this;
  }

   /**
   * Defines how well the record matches the search term.
   * @return score
  **/
  @ApiModelProperty(required = true, value = "Defines how well the record matches the search term.")

  public Float getScore() {
    return score;
  }


  public void setScore(Float score) {
    this.score = score;
  }


  public SearchRecord variantValues(List<Map<String, Object>> variantValues) {
    
    this.variantValues = variantValues;
    return this;
  }

  public SearchRecord addVariantValuesItem(Map<String, Object> variantValuesItem) {
    this.variantValues.add(variantValuesItem);
    return this;
  }

   /**
   * Contains variants. The values are mapped from field names to the field value.
   * @return variantValues
  **/
  @ApiModelProperty(required = true, value = "Contains variants. The values are mapped from field names to the field value.")

  public List<Map<String, Object>> getVariantValues() {
    return variantValues;
  }


  public void setVariantValues(List<Map<String, Object>> variantValues) {
    this.variantValues = variantValues;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRecord searchRecord = (SearchRecord) o;
    return Objects.equals(this.foundWords, searchRecord.foundWords) &&
        Objects.equals(this.id, searchRecord.id) &&
        Objects.equals(this.masterValues, searchRecord.masterValues) &&
        Objects.equals(this.position, searchRecord.position) &&
        Objects.equals(this.score, searchRecord.score) &&
        Objects.equals(this.variantValues, searchRecord.variantValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(foundWords, id, masterValues, position, score, variantValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRecord {\n");
    sb.append("    foundWords: ").append(toIndentedString(foundWords)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    masterValues: ").append(toIndentedString(masterValues)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    variantValues: ").append(toIndentedString(variantValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

