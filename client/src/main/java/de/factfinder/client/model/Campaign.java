/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.factfinder.client.model.FeedbackText;
import de.factfinder.client.model.Question;
import de.factfinder.client.model.Target;
import de.factfinder.client.model.TypedFlatRecord;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Campaign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Campaign {
  public static final String SERIALIZED_NAME_ACTIVE_QUESTIONS = "activeQuestions";
  @SerializedName(SERIALIZED_NAME_ACTIVE_QUESTIONS)
  private List<Question> activeQuestions = null;

  public static final String SERIALIZED_NAME_ADVISOR_TREE = "advisorTree";
  @SerializedName(SERIALIZED_NAME_ADVISOR_TREE)
  private List<Question> advisorTree = new ArrayList<Question>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_EXCLUDE_PRODUCTS_NOT_IN_MARKETS = "excludeProductsNotInMarkets";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_PRODUCTS_NOT_IN_MARKETS)
  private Boolean excludeProductsNotInMarkets;

  public static final String SERIALIZED_NAME_EXCLUDE_PRODUCTS_NOT_IN_RANGE = "excludeProductsNotInRange";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_PRODUCTS_NOT_IN_RANGE)
  private Boolean excludeProductsNotInRange;

  public static final String SERIALIZED_NAME_FEEDBACK_TEXTS = "feedbackTexts";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_TEXTS)
  private List<FeedbackText> feedbackTexts = null;

  /**
   * The kind of the campaign.
   */
  @JsonAdapter(FlavourEnum.Adapter.class)
  public enum FlavourEnum {
    ADVISOR("ADVISOR"),
    
    REDIRECT("REDIRECT"),
    
    FEEDBACK("FEEDBACK"),
    
    PRODUCT("PRODUCT");

    private String value;

    FlavourEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlavourEnum fromValue(String value) {
      for (FlavourEnum b : FlavourEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlavourEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlavourEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlavourEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlavourEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FLAVOUR = "flavour";
  @SerializedName(SERIALIZED_NAME_FLAVOUR)
  private FlavourEnum flavour;

  public static final String SERIALIZED_NAME_HITS = "hits";
  @SerializedName(SERIALIZED_NAME_HITS)
  private List<TypedFlatRecord> hits = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private Target target;


  public Campaign activeQuestions(List<Question> activeQuestions) {
    
    this.activeQuestions = activeQuestions;
    return this;
  }

  public Campaign addActiveQuestionsItem(Question activeQuestionsItem) {
    if (this.activeQuestions == null) {
      this.activeQuestions = new ArrayList<Question>();
    }
    this.activeQuestions.add(activeQuestionsItem);
    return this;
  }

   /**
   * The currently active questions to be shown to the user. These questions do not need to be the root questions, in case the user has already answered a question.
   * @return activeQuestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currently active questions to be shown to the user. These questions do not need to be the root questions, in case the user has already answered a question.")

  public List<Question> getActiveQuestions() {
    return activeQuestions;
  }


  public void setActiveQuestions(List<Question> activeQuestions) {
    this.activeQuestions = activeQuestions;
  }


  public Campaign advisorTree(List<Question> advisorTree) {
    
    this.advisorTree = advisorTree;
    return this;
  }

  public Campaign addAdvisorTreeItem(Question advisorTreeItem) {
    this.advisorTree.add(advisorTreeItem);
    return this;
  }

   /**
   * The advisor root questions associated with this campaign.
   * @return advisorTree
  **/
  @ApiModelProperty(required = true, value = "The advisor root questions associated with this campaign.")

  public List<Question> getAdvisorTree() {
    return advisorTree;
  }


  public void setAdvisorTree(List<Question> advisorTree) {
    this.advisorTree = advisorTree;
  }


  public Campaign category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * The category of the campaign. May be empty.
   * @return category
  **/
  @ApiModelProperty(required = true, value = "The category of the campaign. May be empty.")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public Campaign excludeProductsNotInMarkets(Boolean excludeProductsNotInMarkets) {
    
    this.excludeProductsNotInMarkets = excludeProductsNotInMarkets;
    return this;
  }

   /**
   * The setting which decides whether pushed products should be excluded if they are not mapped to any selected market.
   * @return excludeProductsNotInMarkets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The setting which decides whether pushed products should be excluded if they are not mapped to any selected market.")

  public Boolean getExcludeProductsNotInMarkets() {
    return excludeProductsNotInMarkets;
  }


  public void setExcludeProductsNotInMarkets(Boolean excludeProductsNotInMarkets) {
    this.excludeProductsNotInMarkets = excludeProductsNotInMarkets;
  }


  public Campaign excludeProductsNotInRange(Boolean excludeProductsNotInRange) {
    
    this.excludeProductsNotInRange = excludeProductsNotInRange;
    return this;
  }

   /**
   * The setting which decides whether pushed products should be excluded if they are not close enough to the search location.
   * @return excludeProductsNotInRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The setting which decides whether pushed products should be excluded if they are not close enough to the search location.")

  public Boolean getExcludeProductsNotInRange() {
    return excludeProductsNotInRange;
  }


  public void setExcludeProductsNotInRange(Boolean excludeProductsNotInRange) {
    this.excludeProductsNotInRange = excludeProductsNotInRange;
  }


  public Campaign feedbackTexts(List<FeedbackText> feedbackTexts) {
    
    this.feedbackTexts = feedbackTexts;
    return this;
  }

  public Campaign addFeedbackTextsItem(FeedbackText feedbackTextsItem) {
    if (this.feedbackTexts == null) {
      this.feedbackTexts = new ArrayList<FeedbackText>();
    }
    this.feedbackTexts.add(feedbackTextsItem);
    return this;
  }

   /**
   * The feedback text lines that will be displayed to the user.
   * @return feedbackTexts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The feedback text lines that will be displayed to the user.")

  public List<FeedbackText> getFeedbackTexts() {
    return feedbackTexts;
  }


  public void setFeedbackTexts(List<FeedbackText> feedbackTexts) {
    this.feedbackTexts = feedbackTexts;
  }


  public Campaign flavour(FlavourEnum flavour) {
    
    this.flavour = flavour;
    return this;
  }

   /**
   * The kind of the campaign.
   * @return flavour
  **/
  @ApiModelProperty(required = true, value = "The kind of the campaign.")

  public FlavourEnum getFlavour() {
    return flavour;
  }


  public void setFlavour(FlavourEnum flavour) {
    this.flavour = flavour;
  }


  public Campaign hits(List<TypedFlatRecord> hits) {
    
    this.hits = hits;
    return this;
  }

  public Campaign addHitsItem(TypedFlatRecord hitsItem) {
    if (this.hits == null) {
      this.hits = new ArrayList<TypedFlatRecord>();
    }
    this.hits.add(hitsItem);
    return this;
  }

   /**
   * The records associated with the campaign, if it should push products.
   * @return hits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The records associated with the campaign, if it should push products.")

  public List<TypedFlatRecord> getHits() {
    return hits;
  }


  public void setHits(List<TypedFlatRecord> hits) {
    this.hits = hits;
  }


  public Campaign id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the campaign.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the campaign.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Campaign name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the campaign.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the campaign.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Campaign target(Target target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Target getTarget() {
    return target;
  }


  public void setTarget(Target target) {
    this.target = target;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Campaign campaign = (Campaign) o;
    return Objects.equals(this.activeQuestions, campaign.activeQuestions) &&
        Objects.equals(this.advisorTree, campaign.advisorTree) &&
        Objects.equals(this.category, campaign.category) &&
        Objects.equals(this.excludeProductsNotInMarkets, campaign.excludeProductsNotInMarkets) &&
        Objects.equals(this.excludeProductsNotInRange, campaign.excludeProductsNotInRange) &&
        Objects.equals(this.feedbackTexts, campaign.feedbackTexts) &&
        Objects.equals(this.flavour, campaign.flavour) &&
        Objects.equals(this.hits, campaign.hits) &&
        Objects.equals(this.id, campaign.id) &&
        Objects.equals(this.name, campaign.name) &&
        Objects.equals(this.target, campaign.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeQuestions, advisorTree, category, excludeProductsNotInMarkets, excludeProductsNotInRange, feedbackTexts, flavour, hits, id, name, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Campaign {\n");
    sb.append("    activeQuestions: ").append(toIndentedString(activeQuestions)).append("\n");
    sb.append("    advisorTree: ").append(toIndentedString(advisorTree)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    excludeProductsNotInMarkets: ").append(toIndentedString(excludeProductsNotInMarkets)).append("\n");
    sb.append("    excludeProductsNotInRange: ").append(toIndentedString(excludeProductsNotInRange)).append("\n");
    sb.append("    feedbackTexts: ").append(toIndentedString(feedbackTexts)).append("\n");
    sb.append("    flavour: ").append(toIndentedString(flavour)).append("\n");
    sb.append("    hits: ").append(toIndentedString(hits)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

