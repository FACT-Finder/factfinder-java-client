/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.factfinder.client.model.Location;
import de.factfinder.client.model.SearchParams;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Market
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Market {
  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_HAS_PRODUCTS = "hasProducts";
  @SerializedName(SERIALIZED_NAME_HAS_PRODUCTS)
  private Boolean hasProducts;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_SEARCH_PARAMS = "searchParams";
  @SerializedName(SERIALIZED_NAME_SEARCH_PARAMS)
  private SearchParams searchParams;

  /**
   * TRUE, if the element is currently selected, otherwise FALSE.
   */
  @JsonAdapter(SelectedEnum.Adapter.class)
  public enum SelectedEnum {
    TRUE("TRUE"),
    
    FALSE("FALSE"),
    
    IMPLICIT("IMPLICIT"),
    
    IRRELEVANT("IRRELEVANT");

    private String value;

    SelectedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelectedEnum fromValue(String value) {
      for (SelectedEnum b : SelectedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelectedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelectedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelectedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelectedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private SelectedEnum selected;


  public Market distance(Double distance) {
    
    this.distance = distance;
    return this;
  }

   /**
   * The distance between the location of the search and the market location associated with this element.
   * @return distance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The distance between the location of the search and the market location associated with this element.")

  public Double getDistance() {
    return distance;
  }


  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public Market hasProducts(Boolean hasProducts) {
    
    this.hasProducts = hasProducts;
    return this;
  }

   /**
   * True, if the market has at least one product mapped to it in the current search result, otherwise false.
   * @return hasProducts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True, if the market has at least one product mapped to it in the current search result, otherwise false.")

  public Boolean getHasProducts() {
    return hasProducts;
  }


  public void setHasProducts(Boolean hasProducts) {
    this.hasProducts = hasProducts;
  }


  public Market id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the market
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the market")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Market location(Location location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Location getLocation() {
    return location;
  }


  public void setLocation(Location location) {
    this.location = location;
  }


  public Market searchParams(SearchParams searchParams) {
    
    this.searchParams = searchParams;
    return this;
  }

   /**
   * Get searchParams
   * @return searchParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SearchParams getSearchParams() {
    return searchParams;
  }


  public void setSearchParams(SearchParams searchParams) {
    this.searchParams = searchParams;
  }


  public Market selected(SelectedEnum selected) {
    
    this.selected = selected;
    return this;
  }

   /**
   * TRUE, if the element is currently selected, otherwise FALSE.
   * @return selected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "TRUE, if the element is currently selected, otherwise FALSE.")

  public SelectedEnum getSelected() {
    return selected;
  }


  public void setSelected(SelectedEnum selected) {
    this.selected = selected;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Market market = (Market) o;
    return Objects.equals(this.distance, market.distance) &&
        Objects.equals(this.hasProducts, market.hasProducts) &&
        Objects.equals(this.id, market.id) &&
        Objects.equals(this.location, market.location) &&
        Objects.equals(this.searchParams, market.searchParams) &&
        Objects.equals(this.selected, market.selected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, hasProducts, id, location, searchParams, selected);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Market {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    hasProducts: ").append(toIndentedString(hasProducts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    searchParams: ").append(toIndentedString(searchParams)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

