/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DatabaseState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DatabaseState {
  public static final String SERIALIZED_NAME_DATABASE_VERSION = "databaseVersion";
  @SerializedName(SERIALIZED_NAME_DATABASE_VERSION)
  private Long databaseVersion;

  public static final String SERIALIZED_NAME_DELTA_ERROR_COUNT = "deltaErrorCount";
  @SerializedName(SERIALIZED_NAME_DELTA_ERROR_COUNT)
  private Long deltaErrorCount;

  public static final String SERIALIZED_NAME_DELTA_VERSION = "deltaVersion";
  @SerializedName(SERIALIZED_NAME_DELTA_VERSION)
  private Long deltaVersion;


  public DatabaseState databaseVersion(Long databaseVersion) {
    
    this.databaseVersion = databaseVersion;
    return this;
  }

   /**
   * The version of the current worldmatch database. If the databaseVersion of a worker is less than the databaseVersion of the director, the worker needs to reload the whole worldmatch database in order to synchronize itself with the director.
   * @return databaseVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The version of the current worldmatch database. If the databaseVersion of a worker is less than the databaseVersion of the director, the worker needs to reload the whole worldmatch database in order to synchronize itself with the director.")

  public Long getDatabaseVersion() {
    return databaseVersion;
  }


  public void setDatabaseVersion(Long databaseVersion) {
    this.databaseVersion = databaseVersion;
  }


  public DatabaseState deltaErrorCount(Long deltaErrorCount) {
    
    this.deltaErrorCount = deltaErrorCount;
    return this;
  }

   /**
   * The number of errors (rejected delta updates) which occurred while trying to synchronize worker and director. Reloading the worldmatch database resets this counter to zero.
   * @return deltaErrorCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of errors (rejected delta updates) which occurred while trying to synchronize worker and director. Reloading the worldmatch database resets this counter to zero.")

  public Long getDeltaErrorCount() {
    return deltaErrorCount;
  }


  public void setDeltaErrorCount(Long deltaErrorCount) {
    this.deltaErrorCount = deltaErrorCount;
  }


  public DatabaseState deltaVersion(Long deltaVersion) {
    
    this.deltaVersion = deltaVersion;
    return this;
  }

   /**
   * The number of delta updates applied to the current worldmatch database. If the deltaVersion of a worker is less than the deltaVersion of the directory, but the databaseVersions are equal, applying the missing delta updates to the worker is sufficient to  synchronize worker and director.
   * @return deltaVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of delta updates applied to the current worldmatch database. If the deltaVersion of a worker is less than the deltaVersion of the directory, but the databaseVersions are equal, applying the missing delta updates to the worker is sufficient to  synchronize worker and director.")

  public Long getDeltaVersion() {
    return deltaVersion;
  }


  public void setDeltaVersion(Long deltaVersion) {
    this.deltaVersion = deltaVersion;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseState databaseState = (DatabaseState) o;
    return Objects.equals(this.databaseVersion, databaseState.databaseVersion) &&
        Objects.equals(this.deltaErrorCount, databaseState.deltaErrorCount) &&
        Objects.equals(this.deltaVersion, databaseState.deltaVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseVersion, deltaErrorCount, deltaVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseState {\n");
    sb.append("    databaseVersion: ").append(toIndentedString(databaseVersion)).append("\n");
    sb.append("    deltaErrorCount: ").append(toIndentedString(deltaErrorCount)).append("\n");
    sb.append("    deltaVersion: ").append(toIndentedString(deltaVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

