/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Contains all ui related settings of a FACT-Finder user.
 */
@ApiModel(description = "Contains all ui related settings of a FACT-Finder user.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UiSettings {
  public static final String SERIALIZED_NAME_ENABLE_ADVANCED_MODE = "enableAdvancedMode";
  @SerializedName(SERIALIZED_NAME_ENABLE_ADVANCED_MODE)
  private Boolean enableAdvancedMode;

  public static final String SERIALIZED_NAME_HIDE_ERROR_NOTIFICATIONS = "hideErrorNotifications";
  @SerializedName(SERIALIZED_NAME_HIDE_ERROR_NOTIFICATIONS)
  private Boolean hideErrorNotifications;

  public static final String SERIALIZED_NAME_HIDE_INACTIVE_MODULES = "hideInactiveModules";
  @SerializedName(SERIALIZED_NAME_HIDE_INACTIVE_MODULES)
  private Boolean hideInactiveModules;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;


  public UiSettings enableAdvancedMode(Boolean enableAdvancedMode) {
    
    this.enableAdvancedMode = enableAdvancedMode;
    return this;
  }

   /**
   * In advanced mode the user sees all pages, in normal mode some settings pages are hidden.
   * @return enableAdvancedMode
  **/
  @ApiModelProperty(required = true, value = "In advanced mode the user sees all pages, in normal mode some settings pages are hidden.")

  public Boolean getEnableAdvancedMode() {
    return enableAdvancedMode;
  }


  public void setEnableAdvancedMode(Boolean enableAdvancedMode) {
    this.enableAdvancedMode = enableAdvancedMode;
  }


  public UiSettings hideErrorNotifications(Boolean hideErrorNotifications) {
    
    this.hideErrorNotifications = hideErrorNotifications;
    return this;
  }

   /**
   * Whether error notifications should be hidden by default.
   * @return hideErrorNotifications
  **/
  @ApiModelProperty(required = true, value = "Whether error notifications should be hidden by default.")

  public Boolean getHideErrorNotifications() {
    return hideErrorNotifications;
  }


  public void setHideErrorNotifications(Boolean hideErrorNotifications) {
    this.hideErrorNotifications = hideErrorNotifications;
  }


  public UiSettings hideInactiveModules(Boolean hideInactiveModules) {
    
    this.hideInactiveModules = hideInactiveModules;
    return this;
  }

   /**
   * Whether inactive modules should be hidden by default.
   * @return hideInactiveModules
  **/
  @ApiModelProperty(required = true, value = "Whether inactive modules should be hidden by default.")

  public Boolean getHideInactiveModules() {
    return hideInactiveModules;
  }


  public void setHideInactiveModules(Boolean hideInactiveModules) {
    this.hideInactiveModules = hideInactiveModules;
  }


  public UiSettings locale(String locale) {
    
    this.locale = locale;
    return this;
  }

   /**
   * The language tag representing the locale of the user. May be &#39;null&#39; when the browser locale setting should be used.
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The language tag representing the locale of the user. May be 'null' when the browser locale setting should be used.")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    this.locale = locale;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UiSettings uiSettings = (UiSettings) o;
    return Objects.equals(this.enableAdvancedMode, uiSettings.enableAdvancedMode) &&
        Objects.equals(this.hideErrorNotifications, uiSettings.hideErrorNotifications) &&
        Objects.equals(this.hideInactiveModules, uiSettings.hideInactiveModules) &&
        Objects.equals(this.locale, uiSettings.locale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableAdvancedMode, hideErrorNotifications, hideInactiveModules, locale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiSettings {\n");
    sb.append("    enableAdvancedMode: ").append(toIndentedString(enableAdvancedMode)).append("\n");
    sb.append("    hideErrorNotifications: ").append(toIndentedString(hideErrorNotifications)).append("\n");
    sb.append("    hideInactiveModules: ").append(toIndentedString(hideInactiveModules)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

