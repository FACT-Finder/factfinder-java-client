/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.factfinder.client.model.FilterValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Filter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Filter {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBSTRING = "substring";
  @SerializedName(SERIALIZED_NAME_SUBSTRING)
  private Boolean substring;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<FilterValue> values = new ArrayList<FilterValue>();


  public Filter name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the filter.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the filter.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Filter substring(Boolean substring) {
    
    this.substring = substring;
    return this;
  }

   /**
   * If true, filter values will be applied as &#39;contains&#39; instead of &#39;equals&#39;.
   * @return substring
  **/
  @ApiModelProperty(required = true, value = "If true, filter values will be applied as 'contains' instead of 'equals'.")

  public Boolean getSubstring() {
    return substring;
  }


  public void setSubstring(Boolean substring) {
    this.substring = substring;
  }


  public Filter values(List<FilterValue> values) {
    
    this.values = values;
    return this;
  }

  public Filter addValuesItem(FilterValue valuesItem) {
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Filter values.
   * @return values
  **/
  @ApiModelProperty(required = true, value = "Filter values.")

  public List<FilterValue> getValues() {
    return values;
  }


  public void setValues(List<FilterValue> values) {
    this.values = values;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filter filter = (Filter) o;
    return Objects.equals(this.name, filter.name) &&
        Objects.equals(this.substring, filter.substring) &&
        Objects.equals(this.values, filter.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, substring, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filter {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    substring: ").append(toIndentedString(substring)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

