/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.api;

import de.factfinder.client.ApiCallback;
import de.factfinder.client.ApiClient;
import de.factfinder.client.ApiException;
import de.factfinder.client.ApiResponse;
import de.factfinder.client.Configuration;
import de.factfinder.client.Pair;
import de.factfinder.client.ProgressRequestBody;
import de.factfinder.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.factfinder.client.model.ApiError;
import de.factfinder.client.model.CategoryNavigation;
import de.factfinder.client.model.NavigationRequest;
import de.factfinder.client.model.Result;
import de.factfinder.client.model.SearchRequest;
import de.factfinder.client.model.SuggestParams;
import de.factfinder.client.model.SuggestionResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for categoryNavigationUsingGET
     * @param channel channel (required)
     * @param sid The session id (optional)
     * @param startLevel Category start level (optional)
     * @param endLevel Category end level (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryNavigationUsingGETCall(String channel, String sid, Integer startLevel, Integer endLevel, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Boolean useCache, Boolean useGeo, Boolean useAbTest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v4/navigation/category/{channel}"
            .replaceAll("\\{" + "channel" + "\\}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sid", sid));
        }

        if (startLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startLevel", startLevel));
        }

        if (endLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endLevel", endLevel));
        }

        if (filter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter", filter));
        }

        if (substringFilter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "substringFilter", substringFilter));
        }

        if (forceAbVariant != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "forceAbVariant", forceAbVariant));
        }

        if (marketId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketId", marketId));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (maxDistance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDistance", maxDistance));
        }

        if (excludeProductsNotInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeProductsNotInRange", excludeProductsNotInRange));
        }

        if (purchaserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaserId", purchaserId));
        }

        if (useCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCache", useCache));
        }

        if (useGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useGeo", useGeo));
        }

        if (useAbTest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useAbTest", useAbTest));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryNavigationUsingGETValidateBeforeCall(String channel, String sid, Integer startLevel, Integer endLevel, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Boolean useCache, Boolean useGeo, Boolean useAbTest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling categoryNavigationUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = categoryNavigationUsingGETCall(channel, sid, startLevel, endLevel, filter, substringFilter, forceAbVariant, marketId, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, useCache, useGeo, useAbTest, _callback);
        return localVarCall;

    }

    /**
     * Category ASN for Navigation
     * 
     * @param channel channel (required)
     * @param sid The session id (optional)
     * @param startLevel Category start level (optional)
     * @param endLevel Category end level (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @return CategoryNavigation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CategoryNavigation categoryNavigationUsingGET(String channel, String sid, Integer startLevel, Integer endLevel, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Boolean useCache, Boolean useGeo, Boolean useAbTest) throws ApiException {
        ApiResponse<CategoryNavigation> localVarResp = categoryNavigationUsingGETWithHttpInfo(channel, sid, startLevel, endLevel, filter, substringFilter, forceAbVariant, marketId, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, useCache, useGeo, useAbTest);
        return localVarResp.getData();
    }

    /**
     * Category ASN for Navigation
     * 
     * @param channel channel (required)
     * @param sid The session id (optional)
     * @param startLevel Category start level (optional)
     * @param endLevel Category end level (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @return ApiResponse&lt;CategoryNavigation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryNavigation> categoryNavigationUsingGETWithHttpInfo(String channel, String sid, Integer startLevel, Integer endLevel, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Boolean useCache, Boolean useGeo, Boolean useAbTest) throws ApiException {
        okhttp3.Call localVarCall = categoryNavigationUsingGETValidateBeforeCall(channel, sid, startLevel, endLevel, filter, substringFilter, forceAbVariant, marketId, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, useCache, useGeo, useAbTest, null);
        Type localVarReturnType = new TypeToken<CategoryNavigation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Category ASN for Navigation (asynchronously)
     * 
     * @param channel channel (required)
     * @param sid The session id (optional)
     * @param startLevel Category start level (optional)
     * @param endLevel Category end level (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryNavigationUsingGETAsync(String channel, String sid, Integer startLevel, Integer endLevel, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Boolean useCache, Boolean useGeo, Boolean useAbTest, final ApiCallback<CategoryNavigation> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryNavigationUsingGETValidateBeforeCall(channel, sid, startLevel, endLevel, filter, substringFilter, forceAbVariant, marketId, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, useCache, useGeo, useAbTest, _callback);
        Type localVarReturnType = new TypeToken<CategoryNavigation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSuggestionsUsingGET
     * @param channel channel (required)
     * @param query The search term (required)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param searchField Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param articleNumberSearch Specifies if the query should be interpreted as article number (optional, default to DETECT)
     * @param sid the session id from the user (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionsUsingGETCall(String channel, String query, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, String sid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v4/suggest/{channel}"
            .replaceAll("\\{" + "channel" + "\\}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter", filter));
        }

        if (substringFilter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "substringFilter", substringFilter));
        }

        if (forceAbVariant != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "forceAbVariant", forceAbVariant));
        }

        if (marketId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketId", marketId));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (cacheIrrelevant != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cacheIrrelevant", cacheIrrelevant));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (maxDistance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDistance", maxDistance));
        }

        if (excludeProductsNotInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeProductsNotInRange", excludeProductsNotInRange));
        }

        if (purchaserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaserId", purchaserId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (hitsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hitsPerPage", hitsPerPage));
        }

        if (maxCountVariants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCountVariants", maxCountVariants));
        }

        if (advisorStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advisorStatus", advisorStatus));
        }

        if (followSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("followSearch", followSearch));
        }

        if (searchField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchField", searchField));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (articleNumberSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("articleNumberSearch", articleNumberSearch));
        }

        if (sid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sid", sid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuggestionsUsingGETValidateBeforeCall(String channel, String query, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, String sid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getSuggestionsUsingGET(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getSuggestionsUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getSuggestionsUsingGETCall(channel, query, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, sid, _callback);
        return localVarCall;

    }

    /**
     * Get suggestions
     * 
     * @param channel channel (required)
     * @param query The search term (required)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param searchField Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param articleNumberSearch Specifies if the query should be interpreted as article number (optional, default to DETECT)
     * @param sid the session id from the user (optional)
     * @return SuggestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public SuggestionResult getSuggestionsUsingGET(String channel, String query, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, String sid) throws ApiException {
        ApiResponse<SuggestionResult> localVarResp = getSuggestionsUsingGETWithHttpInfo(channel, query, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, sid);
        return localVarResp.getData();
    }

    /**
     * Get suggestions
     * 
     * @param channel channel (required)
     * @param query The search term (required)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param searchField Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param articleNumberSearch Specifies if the query should be interpreted as article number (optional, default to DETECT)
     * @param sid the session id from the user (optional)
     * @return ApiResponse&lt;SuggestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuggestionResult> getSuggestionsUsingGETWithHttpInfo(String channel, String query, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, String sid) throws ApiException {
        okhttp3.Call localVarCall = getSuggestionsUsingGETValidateBeforeCall(channel, query, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, sid, null);
        Type localVarReturnType = new TypeToken<SuggestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get suggestions (asynchronously)
     * 
     * @param channel channel (required)
     * @param query The search term (required)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param searchField Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param articleNumberSearch Specifies if the query should be interpreted as article number (optional, default to DETECT)
     * @param sid the session id from the user (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionsUsingGETAsync(String channel, String query, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, String sid, final ApiCallback<SuggestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuggestionsUsingGETValidateBeforeCall(channel, query, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, sid, _callback);
        Type localVarReturnType = new TypeToken<SuggestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSuggestionsUsingPOST
     * @param params params (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionsUsingPOSTCall(SuggestParams params, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = params;

        // create path and map variables
        String localVarPath = "/rest/v4/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuggestionsUsingPOSTValidateBeforeCall(SuggestParams params, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'params' is set
        if (params == null) {
            throw new ApiException("Missing the required parameter 'params' when calling getSuggestionsUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = getSuggestionsUsingPOSTCall(params, _callback);
        return localVarCall;

    }

    /**
     * Get suggestions with POST
     * 
     * @param params params (required)
     * @return SuggestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public SuggestionResult getSuggestionsUsingPOST(SuggestParams params) throws ApiException {
        ApiResponse<SuggestionResult> localVarResp = getSuggestionsUsingPOSTWithHttpInfo(params);
        return localVarResp.getData();
    }

    /**
     * Get suggestions with POST
     * 
     * @param params params (required)
     * @return ApiResponse&lt;SuggestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuggestionResult> getSuggestionsUsingPOSTWithHttpInfo(SuggestParams params) throws ApiException {
        okhttp3.Call localVarCall = getSuggestionsUsingPOSTValidateBeforeCall(params, null);
        Type localVarReturnType = new TypeToken<SuggestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get suggestions with POST (asynchronously)
     * 
     * @param params params (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionsUsingPOSTAsync(SuggestParams params, final ApiCallback<SuggestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuggestionsUsingPOSTValidateBeforeCall(params, _callback);
        Type localVarReturnType = new TypeToken<SuggestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for navigationUsingGET
     * @param channel channel (required)
     * @param sid The session id (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param useSearch If true, search will be executed for the query. (optional, default to true)
     * @param useAsn If true, filters should be generated for the result. (optional, default to true)
     * @param useFoundWords If true, the words that led to the records in the search results will be determined; this may require a large amount of processing time. (optional, default to false)
     * @param useCampaigns If true, campaigns corresponding to this search result will be returned. (optional, default to true)
     * @param idsOnly If true, the returned records will contain only record IDs. (optional, default to false)
     * @param usePersonalization If true, the relevant products in the result will be personalized. (optional, default to true)
     * @param useSemanticEnhancer If true, the semantic enhancer will be used. (optional, default to true)
     * @param useAso If true, automatic search optimization will be used. (optional, default to true)
     * @param useDeduplication If true, the configured deduplication of variants will be used. (optional, default to true)
     * @param deduplicationField Specifies on which field variants should be deduplicated. (optional)
     * @param useRanking If true, ranking will be applied. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call navigationUsingGETCall(String channel, String sid, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v4/navigation/{channel}"
            .replaceAll("\\{" + "channel" + "\\}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sid", sid));
        }

        if (filter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter", filter));
        }

        if (substringFilter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "substringFilter", substringFilter));
        }

        if (forceAbVariant != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "forceAbVariant", forceAbVariant));
        }

        if (marketId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketId", marketId));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (cacheIrrelevant != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cacheIrrelevant", cacheIrrelevant));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (maxDistance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDistance", maxDistance));
        }

        if (excludeProductsNotInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeProductsNotInRange", excludeProductsNotInRange));
        }

        if (purchaserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaserId", purchaserId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (hitsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hitsPerPage", hitsPerPage));
        }

        if (maxCountVariants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCountVariants", maxCountVariants));
        }

        if (advisorStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advisorStatus", advisorStatus));
        }

        if (followSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("followSearch", followSearch));
        }

        if (useCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCache", useCache));
        }

        if (useGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useGeo", useGeo));
        }

        if (useAbTest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useAbTest", useAbTest));
        }

        if (useSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSearch", useSearch));
        }

        if (useAsn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useAsn", useAsn));
        }

        if (useFoundWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useFoundWords", useFoundWords));
        }

        if (useCampaigns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCampaigns", useCampaigns));
        }

        if (idsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idsOnly", idsOnly));
        }

        if (usePersonalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usePersonalization", usePersonalization));
        }

        if (useSemanticEnhancer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSemanticEnhancer", useSemanticEnhancer));
        }

        if (useAso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useAso", useAso));
        }

        if (useDeduplication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useDeduplication", useDeduplication));
        }

        if (deduplicationField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deduplicationField", deduplicationField));
        }

        if (useRanking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useRanking", useRanking));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call navigationUsingGETValidateBeforeCall(String channel, String sid, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling navigationUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = navigationUsingGETCall(channel, sid, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking, _callback);
        return localVarCall;

    }

    /**
     * Navigation
     * 
     * @param channel channel (required)
     * @param sid The session id (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param useSearch If true, search will be executed for the query. (optional, default to true)
     * @param useAsn If true, filters should be generated for the result. (optional, default to true)
     * @param useFoundWords If true, the words that led to the records in the search results will be determined; this may require a large amount of processing time. (optional, default to false)
     * @param useCampaigns If true, campaigns corresponding to this search result will be returned. (optional, default to true)
     * @param idsOnly If true, the returned records will contain only record IDs. (optional, default to false)
     * @param usePersonalization If true, the relevant products in the result will be personalized. (optional, default to true)
     * @param useSemanticEnhancer If true, the semantic enhancer will be used. (optional, default to true)
     * @param useAso If true, automatic search optimization will be used. (optional, default to true)
     * @param useDeduplication If true, the configured deduplication of variants will be used. (optional, default to true)
     * @param deduplicationField Specifies on which field variants should be deduplicated. (optional)
     * @param useRanking If true, ranking will be applied. (optional, default to true)
     * @return Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Result navigationUsingGET(String channel, String sid, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking) throws ApiException {
        ApiResponse<Result> localVarResp = navigationUsingGETWithHttpInfo(channel, sid, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking);
        return localVarResp.getData();
    }

    /**
     * Navigation
     * 
     * @param channel channel (required)
     * @param sid The session id (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param useSearch If true, search will be executed for the query. (optional, default to true)
     * @param useAsn If true, filters should be generated for the result. (optional, default to true)
     * @param useFoundWords If true, the words that led to the records in the search results will be determined; this may require a large amount of processing time. (optional, default to false)
     * @param useCampaigns If true, campaigns corresponding to this search result will be returned. (optional, default to true)
     * @param idsOnly If true, the returned records will contain only record IDs. (optional, default to false)
     * @param usePersonalization If true, the relevant products in the result will be personalized. (optional, default to true)
     * @param useSemanticEnhancer If true, the semantic enhancer will be used. (optional, default to true)
     * @param useAso If true, automatic search optimization will be used. (optional, default to true)
     * @param useDeduplication If true, the configured deduplication of variants will be used. (optional, default to true)
     * @param deduplicationField Specifies on which field variants should be deduplicated. (optional)
     * @param useRanking If true, ranking will be applied. (optional, default to true)
     * @return ApiResponse&lt;Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Result> navigationUsingGETWithHttpInfo(String channel, String sid, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking) throws ApiException {
        okhttp3.Call localVarCall = navigationUsingGETValidateBeforeCall(channel, sid, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking, null);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Navigation (asynchronously)
     * 
     * @param channel channel (required)
     * @param sid The session id (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param useSearch If true, search will be executed for the query. (optional, default to true)
     * @param useAsn If true, filters should be generated for the result. (optional, default to true)
     * @param useFoundWords If true, the words that led to the records in the search results will be determined; this may require a large amount of processing time. (optional, default to false)
     * @param useCampaigns If true, campaigns corresponding to this search result will be returned. (optional, default to true)
     * @param idsOnly If true, the returned records will contain only record IDs. (optional, default to false)
     * @param usePersonalization If true, the relevant products in the result will be personalized. (optional, default to true)
     * @param useSemanticEnhancer If true, the semantic enhancer will be used. (optional, default to true)
     * @param useAso If true, automatic search optimization will be used. (optional, default to true)
     * @param useDeduplication If true, the configured deduplication of variants will be used. (optional, default to true)
     * @param deduplicationField Specifies on which field variants should be deduplicated. (optional)
     * @param useRanking If true, ranking will be applied. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call navigationUsingGETAsync(String channel, String sid, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking, final ApiCallback<Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = navigationUsingGETValidateBeforeCall(channel, sid, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking, _callback);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for navigationUsingPOST
     * @param navigationRequest navigationRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call navigationUsingPOSTCall(NavigationRequest navigationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = navigationRequest;

        // create path and map variables
        String localVarPath = "/rest/v4/navigation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call navigationUsingPOSTValidateBeforeCall(NavigationRequest navigationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'navigationRequest' is set
        if (navigationRequest == null) {
            throw new ApiException("Missing the required parameter 'navigationRequest' when calling navigationUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = navigationUsingPOSTCall(navigationRequest, _callback);
        return localVarCall;

    }

    /**
     * Navigation with POST
     * 
     * @param navigationRequest navigationRequest (required)
     * @return Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Result navigationUsingPOST(NavigationRequest navigationRequest) throws ApiException {
        ApiResponse<Result> localVarResp = navigationUsingPOSTWithHttpInfo(navigationRequest);
        return localVarResp.getData();
    }

    /**
     * Navigation with POST
     * 
     * @param navigationRequest navigationRequest (required)
     * @return ApiResponse&lt;Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Result> navigationUsingPOSTWithHttpInfo(NavigationRequest navigationRequest) throws ApiException {
        okhttp3.Call localVarCall = navigationUsingPOSTValidateBeforeCall(navigationRequest, null);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Navigation with POST (asynchronously)
     * 
     * @param navigationRequest navigationRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call navigationUsingPOSTAsync(NavigationRequest navigationRequest, final ApiCallback<Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = navigationUsingPOSTValidateBeforeCall(navigationRequest, _callback);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchUsingGET
     * @param channel channel (required)
     * @param query The search term (required)
     * @param sid The session id (optional)
     * @param userInput Use this parameter to send the characters, the shop user entered until the search query was triggered. (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param searchField Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param articleNumberSearch Specifies if the query should be interpreted as article number (optional, default to DETECT)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param useSearch If true, search will be executed for the query. (optional, default to true)
     * @param useAsn If true, filters should be generated for the result. (optional, default to true)
     * @param useFoundWords If true, the words that led to the records in the search results will be determined; this may require a large amount of processing time. (optional, default to false)
     * @param useCampaigns If true, campaigns corresponding to this search result will be returned. (optional, default to true)
     * @param idsOnly If true, the returned records will contain only record IDs. (optional, default to false)
     * @param usePersonalization If true, the relevant products in the result will be personalized. (optional, default to true)
     * @param useSemanticEnhancer If true, the semantic enhancer will be used. (optional, default to true)
     * @param useAso If true, automatic search optimization will be used. (optional, default to true)
     * @param useDeduplication If true, the configured deduplication of variants will be used. (optional, default to true)
     * @param deduplicationField Specifies on which field variants should be deduplicated. (optional)
     * @param useRanking If true, ranking will be applied. (optional, default to true)
     * @param queryFromSuggest This parameter indicates that the FACT-Finder query was triggered through a selection from the suggestion list. In this case send the parameter with the value true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUsingGETCall(String channel, String query, String sid, String userInput, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking, Boolean queryFromSuggest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v4/search/{channel}"
            .replaceAll("\\{" + "channel" + "\\}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sid", sid));
        }

        if (userInput != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userInput", userInput));
        }

        if (filter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter", filter));
        }

        if (substringFilter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "substringFilter", substringFilter));
        }

        if (forceAbVariant != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "forceAbVariant", forceAbVariant));
        }

        if (marketId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketId", marketId));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (cacheIrrelevant != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cacheIrrelevant", cacheIrrelevant));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (maxDistance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDistance", maxDistance));
        }

        if (excludeProductsNotInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeProductsNotInRange", excludeProductsNotInRange));
        }

        if (purchaserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaserId", purchaserId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (hitsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hitsPerPage", hitsPerPage));
        }

        if (maxCountVariants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCountVariants", maxCountVariants));
        }

        if (advisorStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advisorStatus", advisorStatus));
        }

        if (followSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("followSearch", followSearch));
        }

        if (searchField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchField", searchField));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (articleNumberSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("articleNumberSearch", articleNumberSearch));
        }

        if (useCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCache", useCache));
        }

        if (useGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useGeo", useGeo));
        }

        if (useAbTest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useAbTest", useAbTest));
        }

        if (useSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSearch", useSearch));
        }

        if (useAsn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useAsn", useAsn));
        }

        if (useFoundWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useFoundWords", useFoundWords));
        }

        if (useCampaigns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCampaigns", useCampaigns));
        }

        if (idsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idsOnly", idsOnly));
        }

        if (usePersonalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usePersonalization", usePersonalization));
        }

        if (useSemanticEnhancer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSemanticEnhancer", useSemanticEnhancer));
        }

        if (useAso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useAso", useAso));
        }

        if (useDeduplication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useDeduplication", useDeduplication));
        }

        if (deduplicationField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deduplicationField", deduplicationField));
        }

        if (useRanking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useRanking", useRanking));
        }

        if (queryFromSuggest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryFromSuggest", queryFromSuggest));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUsingGETValidateBeforeCall(String channel, String query, String sid, String userInput, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking, Boolean queryFromSuggest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling searchUsingGET(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = searchUsingGETCall(channel, query, sid, userInput, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking, queryFromSuggest, _callback);
        return localVarCall;

    }

    /**
     * Search
     * 
     * @param channel channel (required)
     * @param query The search term (required)
     * @param sid The session id (optional)
     * @param userInput Use this parameter to send the characters, the shop user entered until the search query was triggered. (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param searchField Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param articleNumberSearch Specifies if the query should be interpreted as article number (optional, default to DETECT)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param useSearch If true, search will be executed for the query. (optional, default to true)
     * @param useAsn If true, filters should be generated for the result. (optional, default to true)
     * @param useFoundWords If true, the words that led to the records in the search results will be determined; this may require a large amount of processing time. (optional, default to false)
     * @param useCampaigns If true, campaigns corresponding to this search result will be returned. (optional, default to true)
     * @param idsOnly If true, the returned records will contain only record IDs. (optional, default to false)
     * @param usePersonalization If true, the relevant products in the result will be personalized. (optional, default to true)
     * @param useSemanticEnhancer If true, the semantic enhancer will be used. (optional, default to true)
     * @param useAso If true, automatic search optimization will be used. (optional, default to true)
     * @param useDeduplication If true, the configured deduplication of variants will be used. (optional, default to true)
     * @param deduplicationField Specifies on which field variants should be deduplicated. (optional)
     * @param useRanking If true, ranking will be applied. (optional, default to true)
     * @param queryFromSuggest This parameter indicates that the FACT-Finder query was triggered through a selection from the suggestion list. In this case send the parameter with the value true. (optional)
     * @return Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Result searchUsingGET(String channel, String query, String sid, String userInput, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking, Boolean queryFromSuggest) throws ApiException {
        ApiResponse<Result> localVarResp = searchUsingGETWithHttpInfo(channel, query, sid, userInput, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking, queryFromSuggest);
        return localVarResp.getData();
    }

    /**
     * Search
     * 
     * @param channel channel (required)
     * @param query The search term (required)
     * @param sid The session id (optional)
     * @param userInput Use this parameter to send the characters, the shop user entered until the search query was triggered. (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param searchField Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param articleNumberSearch Specifies if the query should be interpreted as article number (optional, default to DETECT)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param useSearch If true, search will be executed for the query. (optional, default to true)
     * @param useAsn If true, filters should be generated for the result. (optional, default to true)
     * @param useFoundWords If true, the words that led to the records in the search results will be determined; this may require a large amount of processing time. (optional, default to false)
     * @param useCampaigns If true, campaigns corresponding to this search result will be returned. (optional, default to true)
     * @param idsOnly If true, the returned records will contain only record IDs. (optional, default to false)
     * @param usePersonalization If true, the relevant products in the result will be personalized. (optional, default to true)
     * @param useSemanticEnhancer If true, the semantic enhancer will be used. (optional, default to true)
     * @param useAso If true, automatic search optimization will be used. (optional, default to true)
     * @param useDeduplication If true, the configured deduplication of variants will be used. (optional, default to true)
     * @param deduplicationField Specifies on which field variants should be deduplicated. (optional)
     * @param useRanking If true, ranking will be applied. (optional, default to true)
     * @param queryFromSuggest This parameter indicates that the FACT-Finder query was triggered through a selection from the suggestion list. In this case send the parameter with the value true. (optional)
     * @return ApiResponse&lt;Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Result> searchUsingGETWithHttpInfo(String channel, String query, String sid, String userInput, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking, Boolean queryFromSuggest) throws ApiException {
        okhttp3.Call localVarCall = searchUsingGETValidateBeforeCall(channel, query, sid, userInput, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking, queryFromSuggest, null);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search (asynchronously)
     * 
     * @param channel channel (required)
     * @param query The search term (required)
     * @param sid The session id (optional)
     * @param userInput Use this parameter to send the characters, the shop user entered until the search query was triggered. (optional)
     * @param filter Filter for the whole field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param substringFilter Filter for a sub string of the field value; a filter can have multiple values, the values can be separated with the following characters (they are configurable in the config.xml) &#39;and&#39; &#x3D; \\_\\_\\_ &#39;or&#39; &#x3D; ~~~ the filter value can be excluded with the prefix ! format: facetid:value; example Red~~~!Green &#x3D; red or not green. If the filter name equals &#39;*&#39;, the filter will be applied on any field; example: *:Red~~~Green. This filter type does not support the exclusion prefix. (optional)
     * @param forceAbVariant Forces to apply certain ab variants to the search result; format: abTestId:AbVariantId; example 1b7f3b1a-600f-4d23-b1bf-ac9978628d17:A (optional)
     * @param marketId Only show products that have values for these market IDs. (optional)
     * @param sort Sort the result; use FieldName Relevancy to sort the relevancy; format: FieldName:order order must be either asc or desc; example Manufacturer:asc (optional)
     * @param cacheIrrelevant Flag parameters as cache irrelevant (optional)
     * @param latitude The latitude coordinate of the location. (optional)
     * @param longitude The longitude coordinate of the location. (optional)
     * @param maxDistance Use this parameter to override the \&quot;maximum distance\&quot; setting of the geo search. (optional)
     * @param excludeProductsNotInRange Use this parameter to override the \&quot;exclude products not in range\&quot; setting of the geo search. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param page If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param hitsPerPage In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param maxCountVariants The maximum number of variants to return for every record (optional)
     * @param advisorStatus For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     * @param followSearch Optional request linking param from a previous search result or search param object. Can improve request performance. (optional)
     * @param searchField Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param articleNumberSearch Specifies if the query should be interpreted as article number (optional, default to DETECT)
     * @param useCache If true, the search result will be returned from cache memory, if a possible matching result exists. (optional, default to true)
     * @param useGeo If true geoSearch features will be active. (optional, default to true)
     * @param useAbTest If true AbTest features will be active. (optional, default to true)
     * @param useSearch If true, search will be executed for the query. (optional, default to true)
     * @param useAsn If true, filters should be generated for the result. (optional, default to true)
     * @param useFoundWords If true, the words that led to the records in the search results will be determined; this may require a large amount of processing time. (optional, default to false)
     * @param useCampaigns If true, campaigns corresponding to this search result will be returned. (optional, default to true)
     * @param idsOnly If true, the returned records will contain only record IDs. (optional, default to false)
     * @param usePersonalization If true, the relevant products in the result will be personalized. (optional, default to true)
     * @param useSemanticEnhancer If true, the semantic enhancer will be used. (optional, default to true)
     * @param useAso If true, automatic search optimization will be used. (optional, default to true)
     * @param useDeduplication If true, the configured deduplication of variants will be used. (optional, default to true)
     * @param deduplicationField Specifies on which field variants should be deduplicated. (optional)
     * @param useRanking If true, ranking will be applied. (optional, default to true)
     * @param queryFromSuggest This parameter indicates that the FACT-Finder query was triggered through a selection from the suggestion list. In this case send the parameter with the value true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUsingGETAsync(String channel, String query, String sid, String userInput, List<String> filter, List<String> substringFilter, List<String> forceAbVariant, List<String> marketId, List<String> sort, List<String> cacheIrrelevant, Double latitude, Double longitude, Double maxDistance, Boolean excludeProductsNotInRange, String purchaserId, Integer page, Integer hitsPerPage, Integer maxCountVariants, String advisorStatus, String followSearch, String searchField, String articleNumberSearch, Boolean useCache, Boolean useGeo, Boolean useAbTest, Boolean useSearch, Boolean useAsn, Boolean useFoundWords, Boolean useCampaigns, Boolean idsOnly, Boolean usePersonalization, Boolean useSemanticEnhancer, Boolean useAso, Boolean useDeduplication, String deduplicationField, Boolean useRanking, Boolean queryFromSuggest, final ApiCallback<Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUsingGETValidateBeforeCall(channel, query, sid, userInput, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking, queryFromSuggest, _callback);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchUsingPOST
     * @param searchRequest searchRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUsingPOSTCall(SearchRequest searchRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = searchRequest;

        // create path and map variables
        String localVarPath = "/rest/v4/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUsingPOSTValidateBeforeCall(SearchRequest searchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'searchRequest' is set
        if (searchRequest == null) {
            throw new ApiException("Missing the required parameter 'searchRequest' when calling searchUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = searchUsingPOSTCall(searchRequest, _callback);
        return localVarCall;

    }

    /**
     * Search with POST
     * 
     * @param searchRequest searchRequest (required)
     * @return Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Result searchUsingPOST(SearchRequest searchRequest) throws ApiException {
        ApiResponse<Result> localVarResp = searchUsingPOSTWithHttpInfo(searchRequest);
        return localVarResp.getData();
    }

    /**
     * Search with POST
     * 
     * @param searchRequest searchRequest (required)
     * @return ApiResponse&lt;Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Result> searchUsingPOSTWithHttpInfo(SearchRequest searchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchUsingPOSTValidateBeforeCall(searchRequest, null);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search with POST (asynchronously)
     * 
     * @param searchRequest searchRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-FF-Timeout - If true, the search is timed out. This can result in a response with 0 hits depending on when the timeout occurred. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUsingPOSTAsync(SearchRequest searchRequest, final ApiCallback<Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUsingPOSTValidateBeforeCall(searchRequest, _callback);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
