/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.api;

import de.factfinder.client.ApiCallback;
import de.factfinder.client.ApiClient;
import de.factfinder.client.ApiException;
import de.factfinder.client.ApiResponse;
import de.factfinder.client.Configuration;
import de.factfinder.client.Pair;
import de.factfinder.client.ProgressRequestBody;
import de.factfinder.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.factfinder.client.model.ApiError;
import de.factfinder.client.model.PredictiveBasketResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PredbasketApi {
    private ApiClient localVarApiClient;

    public PredbasketApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PredbasketApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getPredictionsUsingGET
     * @param channel channel (required)
     * @param userId This parameter contains a unique user identifier. It is essential for predictive basket results. (required)
     * @param maxResults Limit for the amount of predictions to return. (optional, default to 0)
     * @param filter Filters for field values of returned records. (optional)
     * @param blacklist IDs of products to exclude from predictions. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPredictionsUsingGETCall(String channel, String userId, Integer maxResults, List<String> filter, List<String> blacklist, String purchaserId, Boolean idsOnly, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v4/predictivebasket/{channel}"
            .replaceAll("\\{" + "channel" + "\\}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (filter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter", filter));
        }

        if (blacklist != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "blacklist", blacklist));
        }

        if (purchaserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaserId", purchaserId));
        }

        if (idsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idsOnly", idsOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPredictionsUsingGETValidateBeforeCall(String channel, String userId, Integer maxResults, List<String> filter, List<String> blacklist, String purchaserId, Boolean idsOnly, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getPredictionsUsingGET(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getPredictionsUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getPredictionsUsingGETCall(channel, userId, maxResults, filter, blacklist, purchaserId, idsOnly, _callback);
        return localVarCall;

    }

    /**
     * Get predictions
     * 
     * @param channel channel (required)
     * @param userId This parameter contains a unique user identifier. It is essential for predictive basket results. (required)
     * @param maxResults Limit for the amount of predictions to return. (optional, default to 0)
     * @param filter Filters for field values of returned records. (optional)
     * @param blacklist IDs of products to exclude from predictions. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @return PredictiveBasketResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PredictiveBasketResult getPredictionsUsingGET(String channel, String userId, Integer maxResults, List<String> filter, List<String> blacklist, String purchaserId, Boolean idsOnly) throws ApiException {
        ApiResponse<PredictiveBasketResult> localVarResp = getPredictionsUsingGETWithHttpInfo(channel, userId, maxResults, filter, blacklist, purchaserId, idsOnly);
        return localVarResp.getData();
    }

    /**
     * Get predictions
     * 
     * @param channel channel (required)
     * @param userId This parameter contains a unique user identifier. It is essential for predictive basket results. (required)
     * @param maxResults Limit for the amount of predictions to return. (optional, default to 0)
     * @param filter Filters for field values of returned records. (optional)
     * @param blacklist IDs of products to exclude from predictions. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @return ApiResponse&lt;PredictiveBasketResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PredictiveBasketResult> getPredictionsUsingGETWithHttpInfo(String channel, String userId, Integer maxResults, List<String> filter, List<String> blacklist, String purchaserId, Boolean idsOnly) throws ApiException {
        okhttp3.Call localVarCall = getPredictionsUsingGETValidateBeforeCall(channel, userId, maxResults, filter, blacklist, purchaserId, idsOnly, null);
        Type localVarReturnType = new TypeToken<PredictiveBasketResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get predictions (asynchronously)
     * 
     * @param channel channel (required)
     * @param userId This parameter contains a unique user identifier. It is essential for predictive basket results. (required)
     * @param maxResults Limit for the amount of predictions to return. (optional, default to 0)
     * @param filter Filters for field values of returned records. (optional)
     * @param blacklist IDs of products to exclude from predictions. (optional)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPredictionsUsingGETAsync(String channel, String userId, Integer maxResults, List<String> filter, List<String> blacklist, String purchaserId, Boolean idsOnly, final ApiCallback<PredictiveBasketResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPredictionsUsingGETValidateBeforeCall(channel, userId, maxResults, filter, blacklist, purchaserId, idsOnly, _callback);
        Type localVarReturnType = new TypeToken<PredictiveBasketResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
