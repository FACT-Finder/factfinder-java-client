/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.api;

import de.factfinder.client.ApiCallback;
import de.factfinder.client.ApiClient;
import de.factfinder.client.ApiException;
import de.factfinder.client.ApiResponse;
import de.factfinder.client.Configuration;
import de.factfinder.client.Pair;
import de.factfinder.client.ProgressRequestBody;
import de.factfinder.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.factfinder.client.model.ApiError;
import de.factfinder.client.model.Campaign;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignApi {
    private ApiClient localVarApiClient;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getPageCampaignsUsingGET
     * @param channel channel (required)
     * @param pageId Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPageCampaignsUsingGETCall(String channel, String pageId, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v4/campaign/{channel}/page"
            .replaceAll("\\{" + "channel" + "\\}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idsOnly", idsOnly));
        }

        if (pageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageId", pageId));
        }

        if (purchaserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaserId", purchaserId));
        }

        if (sid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sid", sid));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (marketIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketIds", marketIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPageCampaignsUsingGETValidateBeforeCall(String channel, String pageId, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getPageCampaignsUsingGET(Async)");
        }
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPageCampaignsUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getPageCampaignsUsingGETCall(channel, pageId, idsOnly, purchaserId, sid, latitude, longitude, marketIds, _callback);
        return localVarCall;

    }

    /**
     * Get page campaigns
     * 
     * @param channel channel (required)
     * @param pageId Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @return List&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Campaign> getPageCampaignsUsingGET(String channel, String pageId, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds) throws ApiException {
        ApiResponse<List<Campaign>> localVarResp = getPageCampaignsUsingGETWithHttpInfo(channel, pageId, idsOnly, purchaserId, sid, latitude, longitude, marketIds);
        return localVarResp.getData();
    }

    /**
     * Get page campaigns
     * 
     * @param channel channel (required)
     * @param pageId Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @return ApiResponse&lt;List&lt;Campaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Campaign>> getPageCampaignsUsingGETWithHttpInfo(String channel, String pageId, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds) throws ApiException {
        okhttp3.Call localVarCall = getPageCampaignsUsingGETValidateBeforeCall(channel, pageId, idsOnly, purchaserId, sid, latitude, longitude, marketIds, null);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get page campaigns (asynchronously)
     * 
     * @param channel channel (required)
     * @param pageId Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPageCampaignsUsingGETAsync(String channel, String pageId, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds, final ApiCallback<List<Campaign>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPageCampaignsUsingGETValidateBeforeCall(channel, pageId, idsOnly, purchaserId, sid, latitude, longitude, marketIds, _callback);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductCampaignsUsingGET
     * @param channel channel (required)
     * @param id Use this parameter to pass a ID (master or product) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param idType Specifies which type of id is given. (optional, default to productNumber)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductCampaignsUsingGETCall(String channel, String id, Boolean idsOnly, String idType, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v4/campaign/{channel}/product"
            .replaceAll("\\{" + "channel" + "\\}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idsOnly", idsOnly));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (idType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idType", idType));
        }

        if (purchaserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaserId", purchaserId));
        }

        if (sid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sid", sid));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (marketIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketIds", marketIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductCampaignsUsingGETValidateBeforeCall(String channel, String id, Boolean idsOnly, String idType, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getProductCampaignsUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProductCampaignsUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getProductCampaignsUsingGETCall(channel, id, idsOnly, idType, purchaserId, sid, latitude, longitude, marketIds, _callback);
        return localVarCall;

    }

    /**
     * Get product campaigns
     * 
     * @param channel channel (required)
     * @param id Use this parameter to pass a ID (master or product) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param idType Specifies which type of id is given. (optional, default to productNumber)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @return List&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Campaign> getProductCampaignsUsingGET(String channel, String id, Boolean idsOnly, String idType, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds) throws ApiException {
        ApiResponse<List<Campaign>> localVarResp = getProductCampaignsUsingGETWithHttpInfo(channel, id, idsOnly, idType, purchaserId, sid, latitude, longitude, marketIds);
        return localVarResp.getData();
    }

    /**
     * Get product campaigns
     * 
     * @param channel channel (required)
     * @param id Use this parameter to pass a ID (master or product) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param idType Specifies which type of id is given. (optional, default to productNumber)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @return ApiResponse&lt;List&lt;Campaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Campaign>> getProductCampaignsUsingGETWithHttpInfo(String channel, String id, Boolean idsOnly, String idType, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds) throws ApiException {
        okhttp3.Call localVarCall = getProductCampaignsUsingGETValidateBeforeCall(channel, id, idsOnly, idType, purchaserId, sid, latitude, longitude, marketIds, null);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product campaigns (asynchronously)
     * 
     * @param channel channel (required)
     * @param id Use this parameter to pass a ID (master or product) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param idType Specifies which type of id is given. (optional, default to productNumber)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductCampaignsUsingGETAsync(String channel, String id, Boolean idsOnly, String idType, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds, final ApiCallback<List<Campaign>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductCampaignsUsingGETValidateBeforeCall(channel, id, idsOnly, idType, purchaserId, sid, latitude, longitude, marketIds, _callback);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShoppingCartCampaignsUsingGET
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShoppingCartCampaignsUsingGETCall(String channel, List<String> productNumber, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/v4/campaign/{channel}/shoppingcart"
            .replaceAll("\\{" + "channel" + "\\}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idsOnly", idsOnly));
        }

        if (productNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "productNumber", productNumber));
        }

        if (purchaserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaserId", purchaserId));
        }

        if (sid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sid", sid));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (marketIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketIds", marketIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShoppingCartCampaignsUsingGETValidateBeforeCall(String channel, List<String> productNumber, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getShoppingCartCampaignsUsingGET(Async)");
        }
        
        // verify the required parameter 'productNumber' is set
        if (productNumber == null) {
            throw new ApiException("Missing the required parameter 'productNumber' when calling getShoppingCartCampaignsUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getShoppingCartCampaignsUsingGETCall(channel, productNumber, idsOnly, purchaserId, sid, latitude, longitude, marketIds, _callback);
        return localVarCall;

    }

    /**
     * Get shopping cart campaigns
     * 
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @return List&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Campaign> getShoppingCartCampaignsUsingGET(String channel, List<String> productNumber, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds) throws ApiException {
        ApiResponse<List<Campaign>> localVarResp = getShoppingCartCampaignsUsingGETWithHttpInfo(channel, productNumber, idsOnly, purchaserId, sid, latitude, longitude, marketIds);
        return localVarResp.getData();
    }

    /**
     * Get shopping cart campaigns
     * 
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @return ApiResponse&lt;List&lt;Campaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Campaign>> getShoppingCartCampaignsUsingGETWithHttpInfo(String channel, List<String> productNumber, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds) throws ApiException {
        okhttp3.Call localVarCall = getShoppingCartCampaignsUsingGETValidateBeforeCall(channel, productNumber, idsOnly, purchaserId, sid, latitude, longitude, marketIds, null);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shopping cart campaigns (asynchronously)
     * 
     * @param channel channel (required)
     * @param productNumber Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param idsOnly If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param purchaserId Use this parameter to pass the purchaser ID. This ID is only needed, if the &#39;customer specific pricing&#39; module is active. Otherwise it will be ignored. (optional)
     * @param sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param latitude The latitude coordinate of the current location. (optional)
     * @param longitude The longitude coordinate of the current location. (optional)
     * @param marketIds Currently selected markets (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShoppingCartCampaignsUsingGETAsync(String channel, List<String> productNumber, Boolean idsOnly, String purchaserId, String sid, Double latitude, Double longitude, List<String> marketIds, final ApiCallback<List<Campaign>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShoppingCartCampaignsUsingGETValidateBeforeCall(channel, productNumber, idsOnly, purchaserId, sid, latitude, longitude, marketIds, _callback);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
