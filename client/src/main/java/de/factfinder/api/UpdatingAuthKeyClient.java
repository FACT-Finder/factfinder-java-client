package de.factfinder.api;

import java.util.List;
import java.util.Map;

import org.apache.commons.codec.digest.DigestUtils;

import io.swagger.client.ApiClient;
import io.swagger.client.Pair;

/**
 * This class was not generated by swagger codegen. It is needed to generate the authentication token with timestamp. As the timestamp is valid for just a short
 * period it is recommended to create a new auth key for each call.
 */
public class UpdatingAuthKeyClient extends ApiClient {
	private final String  userName;
	private final String  password;
	private final String  prefix;
	private final String  postfix;
	private final boolean advancedMode;

	public UpdatingAuthKeyClient(final String userName, final String password, final String prefix, final String postfix, final boolean advancedMode) {
		this.userName = userName;
		this.password = password;
		this.prefix = prefix;
		this.postfix = postfix;
		this.advancedMode = advancedMode;
	}

	@Override
	public void updateParamsForAuth(final String[] authNames, final List<Pair> queryParams, final Map<String, String> headerParams) {
		setApiKey(getApiKey());
		super.updateParamsForAuth(authNames, queryParams, headerParams);
	}

	private String getApiKey() {
		final StringBuilder builder = new StringBuilder(20);
		builder.append(userName).append(":");

		if (advancedMode) {
			final long timestamp = System.currentTimeMillis();
			builder.append(md5(prefix + timestamp + md5(password) + postfix));
			builder.append(":").append(timestamp);
		} else {
			builder.append(md5(password));
		}
		return builder.toString();
	}

	private String md5(final String toMd5) {
		return DigestUtils.md5Hex(toMd5);
	}
}
