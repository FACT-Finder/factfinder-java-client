/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.api;

import de.factfinder.client.ApiException;
import de.factfinder.client.model.ApiError;
import de.factfinder.client.model.ImportChannelResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImportApi
 */
@Ignore
public class ImportApiTest {

    private final ImportApi api = new ImportApi();

    
    /**
     * Check if an import is running in any of the supplied channels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isImportRunningUsingGETTest() throws ApiException {
        List<String> channel = null;
        Boolean response = api.isImportRunningUsingGET(channel);

        // TODO: test validations
    }
    
    /**
     * Refresh recommendation databases
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshRecommendationDatabasesUsingPOSTTest() throws ApiException {
        List<String> channel = null;
        api.refreshRecommendationDatabasesUsingPOST(channel);

        // TODO: test validations
    }
    
    /**
     * Start customer specific pricing import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startCustomerSpecificPricingImportUsingPOSTTest() throws ApiException {
        List<String> channel = null;
        Boolean download = null;
        Boolean cacheFlush = null;
        Boolean quiet = null;
        String importStage = null;
        List<ImportChannelResult> response = api.startCustomerSpecificPricingImportUsingPOST(channel, download, cacheFlush, quiet, importStage);

        // TODO: test validations
    }
    
    /**
     * Start geo import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startGeoImportUsingPOSTTest() throws ApiException {
        List<String> channel = null;
        Boolean download = null;
        Boolean cacheFlush = null;
        Boolean quiet = null;
        String importStage = null;
        List<ImportChannelResult> response = api.startGeoImportUsingPOST(channel, download, cacheFlush, quiet, importStage);

        // TODO: test validations
    }
    
    /**
     * Start ranking import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startRankingImportUsingPOSTTest() throws ApiException {
        List<String> channel = null;
        Boolean cacheFlush = null;
        Boolean quiet = null;
        List<ImportChannelResult> response = api.startRankingImportUsingPOST(channel, cacheFlush, quiet);

        // TODO: test validations
    }
    
    /**
     * Start recommendation import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startRecommendationImportUsingPOSTTest() throws ApiException {
        List<String> channel = null;
        Boolean quiet = null;
        List<ImportChannelResult> response = api.startRecommendationImportUsingPOST(channel, quiet);

        // TODO: test validations
    }
    
    /**
     * Start search import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startSearchImportUsingPOSTTest() throws ApiException {
        List<String> channel = null;
        Boolean download = null;
        Boolean cacheFlush = null;
        Boolean quiet = null;
        String importStage = null;
        Boolean includeCustomerPrices = null;
        List<ImportChannelResult> response = api.startSearchImportUsingPOST(channel, download, cacheFlush, quiet, importStage, includeCustomerPrices);

        // TODO: test validations
    }
    
    /**
     * Start suggest import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startSuggestImportUsingPOSTTest() throws ApiException {
        List<String> channel = null;
        Boolean quiet = null;
        List<ImportChannelResult> response = api.startSuggestImportUsingPOST(channel, quiet);

        // TODO: test validations
    }
    
}
