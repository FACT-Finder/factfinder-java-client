/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.api;

import de.factfinder.client.ApiException;
import de.factfinder.client.model.ApiError;
import de.factfinder.client.model.CartOrCheckoutEvent;
import de.factfinder.client.model.ClickEvent;
import de.factfinder.client.model.FeedbackEvent;
import de.factfinder.client.model.LandingPageClickEvent;
import de.factfinder.client.model.LoginEvent;
import de.factfinder.client.model.PredBasketClickEvent;
import de.factfinder.client.model.RecommendationClickEvent;
import de.factfinder.client.model.SearchLogEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TrackingApi
 */
@Ignore
public class TrackingApiTest {

    private final TrackingApi api = new TrackingApi();

    
    /**
     * Track a cart event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackCartUsingPOSTTest() throws ApiException {
        String channel = null;
        List<CartOrCheckoutEvent> events = null;
        api.trackCartUsingPOST(channel, events);

        // TODO: test validations
    }
    
    /**
     * Track a checkout event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackCheckoutUsingPOSTTest() throws ApiException {
        String channel = null;
        List<CartOrCheckoutEvent> events = null;
        api.trackCheckoutUsingPOST(channel, events);

        // TODO: test validations
    }
    
    /**
     * Track a click event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackClickUsingPOSTTest() throws ApiException {
        String channel = null;
        List<ClickEvent> events = null;
        api.trackClickUsingPOST(channel, events);

        // TODO: test validations
    }
    
    /**
     * Track a feedback event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackFeedbackUsingPOSTTest() throws ApiException {
        String channel = null;
        List<FeedbackEvent> events = null;
        api.trackFeedbackUsingPOST(channel, events);

        // TODO: test validations
    }
    
    /**
     * Track a click event for products provided by a campaign on a landing page.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackLandingPageClickUsingPOSTTest() throws ApiException {
        String channel = null;
        List<LandingPageClickEvent> events = null;
        api.trackLandingPageClickUsingPOST(channel, events);

        // TODO: test validations
    }
    
    /**
     * Track a log event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackLogUsingPOSTTest() throws ApiException {
        String channel = null;
        List<SearchLogEvent> events = null;
        api.trackLogUsingPOST(channel, events);

        // TODO: test validations
    }
    
    /**
     * Track a login event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackLoginUsingPOSTTest() throws ApiException {
        String channel = null;
        List<LoginEvent> events = null;
        api.trackLoginUsingPOST(channel, events);

        // TODO: test validations
    }
    
    /**
     * Track a predictive basket click event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackPredBasketClickUsingPOSTTest() throws ApiException {
        String channel = null;
        List<PredBasketClickEvent> events = null;
        api.trackPredBasketClickUsingPOST(channel, events);

        // TODO: test validations
    }
    
    /**
     * Track a recommendation click event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackRecommendationClickUsingPOSTTest() throws ApiException {
        String channel = null;
        List<RecommendationClickEvent> events = null;
        api.trackRecommendationClickUsingPOST(channel, events);

        // TODO: test validations
    }
    
}
