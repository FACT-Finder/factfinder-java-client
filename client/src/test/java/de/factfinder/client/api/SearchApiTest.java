/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.api;

import de.factfinder.client.ApiException;
import de.factfinder.client.model.ApiError;
import de.factfinder.client.model.CategoryNavigation;
import de.factfinder.client.model.NavigationRequest;
import de.factfinder.client.model.Result;
import de.factfinder.client.model.SearchRequest;
import de.factfinder.client.model.SuggestParams;
import de.factfinder.client.model.SuggestionResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SearchApi
 */
@Ignore
public class SearchApiTest {

    private final SearchApi api = new SearchApi();

    
    /**
     * Category ASN for Navigation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoryNavigationUsingGETTest() throws ApiException {
        String channel = null;
        String sid = null;
        Integer startLevel = null;
        Integer endLevel = null;
        List<String> filter = null;
        List<String> substringFilter = null;
        List<String> forceAbVariant = null;
        List<String> marketId = null;
        Double latitude = null;
        Double longitude = null;
        Double maxDistance = null;
        Boolean excludeProductsNotInRange = null;
        String purchaserId = null;
        Boolean useCache = null;
        Boolean useGeo = null;
        Boolean useAbTest = null;
        CategoryNavigation response = api.categoryNavigationUsingGET(channel, sid, startLevel, endLevel, filter, substringFilter, forceAbVariant, marketId, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, useCache, useGeo, useAbTest);

        // TODO: test validations
    }
    
    /**
     * Get suggestions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSuggestionsUsingGETTest() throws ApiException {
        String channel = null;
        String query = null;
        List<String> filter = null;
        List<String> substringFilter = null;
        List<String> forceAbVariant = null;
        List<String> marketId = null;
        List<String> sort = null;
        List<String> cacheIrrelevant = null;
        Double latitude = null;
        Double longitude = null;
        Double maxDistance = null;
        Boolean excludeProductsNotInRange = null;
        String purchaserId = null;
        Integer page = null;
        Integer hitsPerPage = null;
        Integer maxCountVariants = null;
        String advisorStatus = null;
        String followSearch = null;
        String searchField = null;
        String articleNumberSearch = null;
        String sid = null;
        SuggestionResult response = api.getSuggestionsUsingGET(channel, query, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, sid);

        // TODO: test validations
    }
    
    /**
     * Get suggestions with POST
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSuggestionsUsingPOSTTest() throws ApiException {
        SuggestParams params = null;
        SuggestionResult response = api.getSuggestionsUsingPOST(params);

        // TODO: test validations
    }
    
    /**
     * Navigation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void navigationUsingGETTest() throws ApiException {
        String channel = null;
        String sid = null;
        List<String> filter = null;
        List<String> substringFilter = null;
        List<String> forceAbVariant = null;
        List<String> marketId = null;
        List<String> sort = null;
        List<String> cacheIrrelevant = null;
        Double latitude = null;
        Double longitude = null;
        Double maxDistance = null;
        Boolean excludeProductsNotInRange = null;
        String purchaserId = null;
        Integer page = null;
        Integer hitsPerPage = null;
        Integer maxCountVariants = null;
        String advisorStatus = null;
        String followSearch = null;
        Boolean useCache = null;
        Boolean useGeo = null;
        Boolean useAbTest = null;
        Boolean useSearch = null;
        Boolean useAsn = null;
        Boolean useFoundWords = null;
        Boolean useCampaigns = null;
        Boolean idsOnly = null;
        Boolean usePersonalization = null;
        Boolean useSemanticEnhancer = null;
        Boolean useAso = null;
        Boolean useDeduplication = null;
        String deduplicationField = null;
        Boolean useRanking = null;
        Result response = api.navigationUsingGET(channel, sid, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking);

        // TODO: test validations
    }
    
    /**
     * Navigation with POST
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void navigationUsingPOSTTest() throws ApiException {
        NavigationRequest navigationRequest = null;
        Result response = api.navigationUsingPOST(navigationRequest);

        // TODO: test validations
    }
    
    /**
     * Search
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchUsingGETTest() throws ApiException {
        String channel = null;
        String query = null;
        String sid = null;
        String userInput = null;
        List<String> filter = null;
        List<String> substringFilter = null;
        List<String> forceAbVariant = null;
        List<String> marketId = null;
        List<String> sort = null;
        List<String> cacheIrrelevant = null;
        Double latitude = null;
        Double longitude = null;
        Double maxDistance = null;
        Boolean excludeProductsNotInRange = null;
        String purchaserId = null;
        Integer page = null;
        Integer hitsPerPage = null;
        Integer maxCountVariants = null;
        String advisorStatus = null;
        String followSearch = null;
        String searchField = null;
        String articleNumberSearch = null;
        Boolean useCache = null;
        Boolean useGeo = null;
        Boolean useAbTest = null;
        Boolean useSearch = null;
        Boolean useAsn = null;
        Boolean useFoundWords = null;
        Boolean useCampaigns = null;
        Boolean idsOnly = null;
        Boolean usePersonalization = null;
        Boolean useSemanticEnhancer = null;
        Boolean useAso = null;
        Boolean useDeduplication = null;
        String deduplicationField = null;
        Boolean useRanking = null;
        Boolean queryFromSuggest = null;
        Result response = api.searchUsingGET(channel, query, sid, userInput, filter, substringFilter, forceAbVariant, marketId, sort, cacheIrrelevant, latitude, longitude, maxDistance, excludeProductsNotInRange, purchaserId, page, hitsPerPage, maxCountVariants, advisorStatus, followSearch, searchField, articleNumberSearch, useCache, useGeo, useAbTest, useSearch, useAsn, useFoundWords, useCampaigns, idsOnly, usePersonalization, useSemanticEnhancer, useAso, useDeduplication, deduplicationField, useRanking, queryFromSuggest);

        // TODO: test validations
    }
    
    /**
     * Search with POST
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchUsingPOSTTest() throws ApiException {
        SearchRequest searchRequest = null;
        Result response = api.searchUsingPOST(searchRequest);

        // TODO: test validations
    }
    
}
