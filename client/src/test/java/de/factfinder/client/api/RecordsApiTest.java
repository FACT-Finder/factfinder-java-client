/*
 * FACT-Finder REST-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.factfinder.client.api;

import de.factfinder.client.ApiException;
import de.factfinder.client.model.ApiError;
import de.factfinder.client.model.CompareResult;
import de.factfinder.client.model.CustomerPriceUpdateResult;
import de.factfinder.client.model.DeleteMarketRequest;
import de.factfinder.client.model.DeleteRequest;
import de.factfinder.client.model.DeleteResult;
import de.factfinder.client.model.DeltaUpdateResult;
import de.factfinder.client.model.DetailPage;
import de.factfinder.client.model.FlatRecordsResult;
import de.factfinder.client.model.FullRecordsResult;
import de.factfinder.client.model.GeoUpdateResult;
import de.factfinder.client.model.MarketUpdateResult;
import de.factfinder.client.model.MetaRequest;
import de.factfinder.client.model.RecommendationResultWithFieldRoles;
import de.factfinder.client.model.RecordMetaResult;
import de.factfinder.client.model.SimilarProductsWithFieldRoles;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecordsApi
 */
@Ignore
public class RecordsApiTest {

    private final RecordsApi api = new RecordsApi();

    
    /**
     * Compare products
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compareUsingGETTest() throws ApiException {
        String channel = null;
        Boolean idsOnly = null;
        List<String> id = null;
        String purchaserId = null;
        CompareResult response = api.compareUsingGET(channel, idsOnly, id, purchaserId);

        // TODO: test validations
    }
    
    /**
     * Delete customer prices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomerPricesUsingDELETETest() throws ApiException {
        String channel = null;
        List<String> id = null;
        String idType = null;
        Boolean verbose = null;
        DeleteRequest deleteRequest = null;
        List<DeleteResult> response = api.deleteCustomerPricesUsingDELETE(channel, id, idType, verbose, deleteRequest);

        // TODO: test validations
    }
    
    /**
     * Delete geo data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGeoUsingDELETETest() throws ApiException {
        String channel = null;
        List<String> id = null;
        Boolean verbose = null;
        DeleteRequest deleteRequest = null;
        List<DeleteResult> response = api.deleteGeoUsingDELETE(channel, id, verbose, deleteRequest);

        // TODO: test validations
    }
    
    /**
     * Delete geo market
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMarketUsingDELETETest() throws ApiException {
        String channel = null;
        List<String> marketId = null;
        Boolean verbose = null;
        DeleteMarketRequest deleteMarketRequest = null;
        List<DeleteResult> response = api.deleteMarketUsingDELETE(channel, marketId, verbose, deleteMarketRequest);

        // TODO: test validations
    }
    
    /**
     * Delete records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETETest() throws ApiException {
        String channel = null;
        List<String> id = null;
        String idType = null;
        Boolean verbose = null;
        DeleteRequest deleteRequest = null;
        List<DeleteResult> response = api.deleteUsingDELETE(channel, id, idType, verbose, deleteRequest);

        // TODO: test validations
    }
    
    /**
     * Get customer specific prices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerPricesUsingGETTest() throws ApiException {
        String channel = null;
        List<String> id = null;
        String idType = null;
        List<Map<String, Object>> response = api.getCustomerPricesUsingGET(channel, id, idType);

        // TODO: test validations
    }
    
    /**
     * Get the detail page
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDetailPageUsingGETTest() throws ApiException {
        String channel = null;
        String id = null;
        String idType = null;
        Boolean idsOnly = null;
        Integer maxResultsRecommendations = null;
        Integer maxResultsSimilarProducts = null;
        Boolean usePersonalization = null;
        String sid = null;
        String purchaserId = null;
        Double latitude = null;
        Double longitude = null;
        List<String> marketIds = null;
        Integer maxCountVariants = null;
        Boolean withCampaigns = null;
        Boolean withRecommendations = null;
        Boolean withSimilarProducts = null;
        Boolean withRecord = null;
        DetailPage response = api.getDetailPageUsingGET(channel, id, idType, idsOnly, maxResultsRecommendations, maxResultsSimilarProducts, usePersonalization, sid, purchaserId, latitude, longitude, marketIds, maxCountVariants, withCampaigns, withRecommendations, withSimilarProducts, withRecord);

        // TODO: test validations
    }
    
    /**
     * Get full records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFullRecordsUsingGETTest() throws ApiException {
        String channel = null;
        List<String> id = null;
        String purchaserId = null;
        String idType = null;
        Integer maxCountVariants = null;
        FullRecordsResult response = api.getFullRecordsUsingGET(channel, id, purchaserId, idType, maxCountVariants);

        // TODO: test validations
    }
    
    /**
     * Get geo data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGeoUsingGETTest() throws ApiException {
        String channel = null;
        List<String> id = null;
        List<Map<String, Object>> response = api.getGeoUsingGET(channel, id);

        // TODO: test validations
    }
    
    /**
     * Get markets with location
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMarketsUsingGETTest() throws ApiException {
        String channel = null;
        List<String> marketId = null;
        List<Map<String, Object>> response = api.getMarketsUsingGET(channel, marketId);

        // TODO: test validations
    }
    
    /**
     * Get recommendations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendationUsingGETTest() throws ApiException {
        String channel = null;
        List<String> id = null;
        Integer maxResults = null;
        String sid = null;
        List<String> filter = null;
        Boolean idsOnly = null;
        Boolean usePersonalization = null;
        String purchaserId = null;
        RecommendationResultWithFieldRoles response = api.getRecommendationUsingGET(channel, id, maxResults, sid, filter, idsOnly, usePersonalization, purchaserId);

        // TODO: test validations
    }
    
    /**
     * Retrieve record metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordMetaGetUsingGETTest() throws ApiException {
        String channel = null;
        List<String> id = null;
        String purchaserId = null;
        String idType = null;
        RecordMetaResult response = api.getRecordMetaGetUsingGET(channel, id, purchaserId, idType);

        // TODO: test validations
    }
    
    /**
     * Retrieve record metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordMetaPostUsingPOSTTest() throws ApiException {
        String channel = null;
        MetaRequest metaRequest = null;
        String idType = null;
        String purchaserId = null;
        RecordMetaResult response = api.getRecordMetaPostUsingPOST(channel, metaRequest, idType, purchaserId);

        // TODO: test validations
    }
    
    /**
     * Get records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordsUsingGETTest() throws ApiException {
        String channel = null;
        List<String> productNumber = null;
        String purchaserId = null;
        Boolean verbose = null;
        FlatRecordsResult response = api.getRecordsUsingGET(channel, productNumber, purchaserId, verbose);

        // TODO: test validations
    }
    
    /**
     * Get similar products
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSimilarProductsUsingGETTest() throws ApiException {
        String channel = null;
        String id = null;
        String idType = null;
        List<String> filter = null;
        Boolean idsOnly = null;
        String purchaserId = null;
        Integer maxResults = null;
        SimilarProductsWithFieldRoles response = api.getSimilarProductsUsingGET(channel, id, idType, filter, idsOnly, purchaserId, maxResults);

        // TODO: test validations
    }
    
    /**
     * Insert records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void insertRecordsUsingPOSTTest() throws ApiException {
        String channel = null;
        List<Map<String, Object>> records = null;
        Boolean verbose = null;
        List<DeltaUpdateResult> response = api.insertRecordsUsingPOST(channel, records, verbose);

        // TODO: test validations
    }
    
    /**
     * Update customer prices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerPricesUsingPOSTTest() throws ApiException {
        String channel = null;
        List<Map<String, Object>> records = null;
        Boolean verbose = null;
        List<CustomerPriceUpdateResult> response = api.updateCustomerPricesUsingPOST(channel, records, verbose);

        // TODO: test validations
    }
    
    /**
     * Update geo data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGeoUsingPOSTTest() throws ApiException {
        String channel = null;
        List<Map<String, Object>> records = null;
        Boolean verbose = null;
        List<GeoUpdateResult> response = api.updateGeoUsingPOST(channel, records, verbose);

        // TODO: test validations
    }
    
    /**
     * Update markets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMarketsUsingPOSTTest() throws ApiException {
        String channel = null;
        List<Map<String, Object>> markets = null;
        Boolean verbose = null;
        List<MarketUpdateResult> response = api.updateMarketsUsingPOST(channel, markets, verbose);

        // TODO: test validations
    }
    
    /**
     * Update records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsingPUTTest() throws ApiException {
        String channel = null;
        List<Map<String, Object>> records = null;
        Boolean verbose = null;
        List<DeltaUpdateResult> response = api.updateUsingPUT(channel, records, verbose);

        // TODO: test validations
    }
    
    /**
     * Upsert records
     *
     * Update or insert records; Without variants: inserts records when they do not already exist, or replaces them if they do. With Variants: inserts a master document when it does not exists; inserts a variant and replaces the master values if the variant does not exist; replaces a variant and replaces the master values if the variant does already exist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertRecordsUsingPUTTest() throws ApiException {
        String channel = null;
        List<Map<String, Object>> records = null;
        Boolean verbose = null;
        List<DeltaUpdateResult> response = api.upsertRecordsUsingPUT(channel, records, verbose);

        // TODO: test validations
    }
    
}
